"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

"""Base GraphQL type for a field containing analytics metadata"""
interface AnalyticsField {
  """Default format for number or date"""
  defaultFormat: String

  """
  For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html
  """
  semanticRole: String

  """
  Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs
  """
  aggregation: String

  """For the percentile aggregation, the percentile number"""
  aggregationParam: String

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection
}

"""Filter by GraphQL field and given value"""
input AnalyticsField_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID

  """Unique Identifier of object to retrieve"""
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum AnalyticsFieldOrderField {
  """Sort by id"""
  ID
}

"""Connection Type for AnalyticsField"""
type AnalyticsFieldsConnection {
  """List of nodes"""
  nodes: [AnalyticsField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input AnalyticsFieldSortOrder {
  """GraphQL field to sort on"""
  field: AnalyticsFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
GraphQL type for a binned continuous measure field. See
https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_bins.html
"""
type BinField implements Field & DataField & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Data category of the field"""
  dataCategory: FieldRoleCategory!

  """Role of the field: 'dimension', 'measure' or 'unknown'"""
  role: FieldRole!

  """
  Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html
  """
  dataType: FieldDataType!

  """List of aliases, if any, for this field"""
  valueAliases(
    """Filter by GraphQL field and given value"""
    filter: ValueAlias_Filter
  ): [ValueAlias!]!

  """Formula of the calculated field"""
  formula: String

  """Size of the bin"""
  binSize: String

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """List of parameters, if any, used in this field"""
  parameters(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ParameterSortOrder
  ): [Parameter!]!

  """List of parameters, if any, used in this field"""
  parametersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ParameterSortOrder
  ): ParametersConnection

  """Columns downstream of this field"""
  downstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns downstream of this field. Recurse is not supported with pagination. Please use downstreamColumns instead.
  """
  downstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Tables downstream of this field"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this field. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases downstream of this field"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this field. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flpws downstream of this field"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flpws downstream of this field. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """downstream fields that reference this field"""
  downstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  downstream fields that reference this field. Recurse is not supported with
  pagination. Please use downstreamFields instead.
  """
  downstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]

  """
  Recurse is not supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]

  """
  Workbooks connected downstream from the field. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable!]!

  """
  Tables connected upstream from the field. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows connected upstream from the field"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows connected upstream from the field. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources connected upstream from the field"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """fields that are upstream of this field"""
  upstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field]!

  """
  fields that are upstream of this field. Recurse is not supported with pagination. Please use upstreamFields instead.
  """
  upstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """All upstream columns this field references"""
  upstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column]!

  """
  All upstream columns this field references. Recurse is not supported with pagination. Please use upstreamColumns instead.
  """
  upstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection
}

"""Filter by GraphQL field and given value"""
input BinField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum BinFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by dataCategory"""
  DATA_CATEGORY

  """Sort by dataType"""
  DATA_TYPE

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by role"""
  ROLE
}

"""Connection Type for BinField"""
type BinFieldsConnection {
  """List of nodes"""
  nodes: [BinField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input BinFieldSortOrder {
  """GraphQL field to sort on"""
  field: BinFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
GraphQL type for a calculated field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_calculatedfields.html
"""
type CalculatedField implements Field & DataField & AnalyticsField & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Data category of the field"""
  dataCategory: FieldRoleCategory!

  """Role of the field: 'dimension', 'measure' or 'unknown'"""
  role: FieldRole!

  """
  Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html
  """
  dataType: FieldDataType!

  """List of aliases, if any, for this field"""
  valueAliases(
    """Filter by GraphQL field and given value"""
    filter: ValueAlias_Filter
  ): [ValueAlias!]!

  """Default format for number or date"""
  defaultFormat: String

  """
  For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html
  """
  semanticRole: String

  """
  Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs
  """
  aggregation: String

  """For the percentile aggregation, the percentile number"""
  aggregationParam: String

  """Formula of the calculated field"""
  formula: String

  """
  True if Tableau automatically created this field. A list of autogenerated
  fields are here: https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_understanddatawindow.html#AutoFields
  """
  isAutoGenerated: Boolean!

  """
  True if field formula that involves a user function (for example, USERNAME or ISMEMBEROF)
  """
  hasUserReference: Boolean!

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """List of parameters, if any, used in this field"""
  parameters(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ParameterSortOrder
  ): [Parameter!]!

  """List of parameters, if any, used in this field"""
  parametersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ParameterSortOrder
  ): ParametersConnection

  """Columns downstream of this field"""
  downstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns downstream of this field. Recurse is not supported with pagination. Please use downstreamColumns instead.
  """
  downstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Tables downstream of this field"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this field. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases downstream of this field"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this field. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flpws downstream of this field"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flpws downstream of this field. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """downstream fields that reference this field"""
  downstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  downstream fields that reference this field. Recurse is not supported with
  pagination. Please use downstreamFields instead.
  """
  downstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]

  """
  Recurse is not supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]

  """
  Workbooks connected downstream from the field. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable!]!

  """
  Tables connected upstream from the field. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows connected upstream from the field"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows connected upstream from the field. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources connected upstream from the field"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection

  """Sheet that contains this calculated field"""
  sheet: Sheet

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """fields that are upstream of this field"""
  upstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field]!

  """
  fields that are upstream of this field. Recurse is not supported with pagination. Please use upstreamFields instead.
  """
  upstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """All upstream columns this field references"""
  upstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column]!

  """
  All upstream columns this field references. Recurse is not supported with pagination. Please use upstreamColumns instead.
  """
  upstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection
}

"""Filter by GraphQL field and given value"""
input CalculatedField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum CalculatedFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by dataCategory"""
  DATA_CATEGORY

  """Sort by dataType"""
  DATA_TYPE

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by role"""
  ROLE
}

"""Connection Type for CalculatedField"""
type CalculatedFieldsConnection {
  """List of nodes"""
  nodes: [CalculatedField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input CalculatedFieldSortOrder {
  """GraphQL field to sort on"""
  field: CalculatedFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" cloud file connection"""
type CloudFile implements Database & Warnable {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """
  Vizportal ID of this database, for use in client-to-server communications
  """
  vizportalId: String!

  """Name shown in server and desktop clients"""
  name: String!

  """Connection type shortname"""
  connectionType: String!

  """
  True if this file is embedded in Tableau content, e.g., a packaged workbook
  """
  isEmbedded: Boolean

  """
  The provider of the cloud file, e.g., onedrive, google-sheets, dropbox, and box
  """
  provider: String!

  """The file extension"""
  fileExtension: String

  """The MIME type"""
  mimeType: String

  """
  The ID used by the provider for the cloud file. Each provider uses IDs in a different format.
  """
  fileId: String!

  """URL for requesting the cloud file"""
  requestUrl: String

  """User modifiable description of this database"""
  description: String

  """Contact for this database"""
  contact: TableauUser

  """True if this database has been marked as certified"""
  isCertified: Boolean

  """True if this database has its permission locked"""
  isControlledPermissionsEnabled: Boolean

  """Notes related to this database being marked as certified"""
  certificationNote: String

  """User who marked this database as certified"""
  certifier: TableauUser

  """True if the database has an active data quality warning"""
  hasActiveWarning: Boolean!

  """The optional data quality warning on a database"""
  dataQualityWarning: DataQualityWarning

  """Databases upstream of this database"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream of this database. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables upstream of this database"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream of this database. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows upstream of this database"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows upstream of this database. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream of this database"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream of this database. Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Databases downstream of this database"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this database. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables downstream of this database"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this database. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows downstream of this database"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows downstream of this database. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Published datasources connected to the database"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Published datasources connected to the database. Recurse is not supported with
  pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Workbooks connected to the database"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks connected to the database. Recurse is not supported with pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Sheets connected to the database"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected to the database"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Owners connected to the database"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Owners connected to the database"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables belonging to this database"""
  tables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable]

  """
  Tables belonging to this database. Recurse is not supported with pagination. Please use tables instead.
  """
  tablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection
}

"""Filter by GraphQL field and given value"""
input CloudFile_Filter {
  """True if the database has an active data quality warning"""
  hasActiveWarning: Boolean

  """True if the database has an active data quality warning"""
  hasActiveWarningWithin: [Boolean]

  """True if this database has been marked as certified"""
  isCertified: Boolean

  """True if this database has been marked as certified"""
  isCertifiedWithin: [Boolean]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  True if this file is embedded in Tableau content, e.g., a packaged workbook
  """
  isEmbedded: Boolean

  """
  True if this file is embedded in Tableau content, e.g., a packaged workbook
  """
  isEmbeddedWithin: [Boolean]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """Connection type shortname"""
  connectionType: String

  """Connection type shortname"""
  connectionTypeWithin: [String]

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum CloudFileOrderField {
  """Sort by downstreamDatasources count"""
  DOWNSTREAM_DATASOURCES_COUNT

  """Sort by downstreamWorkbooks count"""
  DOWNSTREAM_WORKBOOKS_COUNT

  """Sort by connectionType"""
  CONNECTION_TYPE

  """Sort by hasActiveWarning"""
  HAS_ACTIVE_WARNING

  """Sort by id"""
  ID

  """Sort by isCertified"""
  IS_CERTIFIED

  """Sort by isEmbedded"""
  IS_EMBEDDED

  """Sort by name"""
  NAME
}

"""Connection Type for CloudFile"""
type CloudFilesConnection {
  """List of nodes"""
  nodes: [CloudFile!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input CloudFileSortOrder {
  """GraphQL field to sort on"""
  field: CloudFileOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""GraphQL type for a table column"""
type Column {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """
  Vizportal ID of this column, for use in client-to-server communications
  """
  vizportalId: String

  """Name of column"""
  name: String!

  """User modifiable description of this column"""
  description: String

  """
  Remote type on the database. Types correspond to OLEDB types here: https://referencesource.microsoft.com/#system.data/System/Data/OleDb/OLEDB_Enum.cs,364
  """
  remoteType: RemoteType!

  """True if this column has been marked as certified"""
  isCertified: Boolean

  """Notes related to the column being marked as certified"""
  certificationNote: String

  """Columns upstream from the column"""
  upstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns upstream from the column. Recurse is not supported with pagination. Please use upstreamColumns instead.
  """
  upstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Tables upstream from the Table"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream from the Table. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases upstream from the Table"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream from the Table. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows connected upstream from the column"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows connected upstream from the column. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream from this column"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream from this column. Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Columns downstream from the column"""
  downstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns downstream from the column. Recurse is not supported with pagination. Please use downstreamColumns instead.
  """
  downstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Tables downstream from the column"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream from the column. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases downstream from the column"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream from the column. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows downstream from the column"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows downstream from the column. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Fields downstream from the column"""
  downstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  Fields downstream from the column. Recurse is not supported with pagination. Please use downstreamFields instead.
  """
  downstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """Published datasources downstream from the column"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Published datasources downstream from the column. Recurse is not supported
  with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets downstream from the column"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets downstream from the column"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks downstream from the column"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks downstream from the column. Recurse is not supported with pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """
  Owners of workbooks and published datasources downstream from the column
  """
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """
  Owners of workbooks and published datasources downstream from the column
  """
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """The table that this column belongs to"""
  table: Table

  """The column field that references this column"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: ColumnField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [ColumnField]

  """
  The column field that references this column. Recurse is not supported with
  pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: ColumnField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnFieldSortOrder
  ): ColumnFieldsConnection

  """A flow input field that wraps this column"""
  referencedByFlowColumnInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowColumnInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowColumnInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowColumnInputField]

  """
  A flow input field that wraps this column. Recurse is not supported with
  pagination. Please use referencedByFlowColumnInputField instead.
  """
  referencedByFlowColumnInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowColumnInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowColumnInputFieldSortOrder
  ): FlowColumnInputFieldsConnection

  """A flow output field that wraps this column"""
  referencedByFlowColumnOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowColumnOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowColumnOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowColumnOutputField]

  """
  A flow output field that wraps this column. Recurse is not supported with
  pagination. Please use referencedByFlowColumnOutputField instead.
  """
  referencedByFlowColumnOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowColumnOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowColumnOutputFieldSortOrder
  ): FlowColumnOutputFieldsConnection
}

"""Filter by GraphQL field and given value"""
input Column_Filter {
  """Name of column"""
  name: String

  """Name of column"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""
ColumnFields are a type of field which directly connects to a column in some type of table.
"""
type ColumnField implements Field & DataField & AnalyticsField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Data category of the field"""
  dataCategory: FieldRoleCategory!

  """Role of the field: 'dimension', 'measure' or 'unknown'"""
  role: FieldRole!

  """
  Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html
  """
  dataType: FieldDataType!

  """List of aliases, if any, for this field"""
  valueAliases(
    """Filter by GraphQL field and given value"""
    filter: ValueAlias_Filter
  ): [ValueAlias!]!

  """Default format for number or date"""
  defaultFormat: String

  """
  For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html
  """
  semanticRole: String

  """
  Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs
  """
  aggregation: String

  """For the percentile aggregation, the percentile number"""
  aggregationParam: String

  """List of columns, if any, that this field references"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  List of columns, if any, that this field references. Recurse is not supported with pagination. Please use columns instead.
  """
  columnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Columns downstream of this field"""
  downstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns downstream of this field. Recurse is not supported with pagination. Please use downstreamColumns instead.
  """
  downstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Tables downstream of this field"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this field. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases downstream of this field"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this field. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flpws downstream of this field"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flpws downstream of this field. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """downstream fields that reference this field"""
  downstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  downstream fields that reference this field. Recurse is not supported with
  pagination. Please use downstreamFields instead.
  """
  downstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]

  """
  Recurse is not supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]

  """
  Workbooks connected downstream from the field. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable!]!

  """
  Tables connected upstream from the field. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows connected upstream from the field"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows connected upstream from the field. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources connected upstream from the field"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """fields that are upstream of this field"""
  upstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field]!

  """
  fields that are upstream of this field. Recurse is not supported with pagination. Please use upstreamFields instead.
  """
  upstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """All upstream columns this field references"""
  upstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column]!

  """
  All upstream columns this field references. Recurse is not supported with pagination. Please use upstreamColumns instead.
  """
  upstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection
}

"""Filter by GraphQL field and given value"""
input ColumnField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum ColumnFieldOrderField {
  """Sort by columns count"""
  COLUMNS_COUNT

  """Sort by dataCategory"""
  DATA_CATEGORY

  """Sort by dataType"""
  DATA_TYPE

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by role"""
  ROLE
}

"""Connection Type for ColumnField"""
type ColumnFieldsConnection {
  """List of nodes"""
  nodes: [ColumnField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input ColumnFieldSortOrder {
  """GraphQL field to sort on"""
  field: ColumnFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Enum for fields that can be used for sorting"""
enum ColumnOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for Column"""
type ColumnsConnection {
  """List of nodes"""
  nodes: [Column!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input ColumnSortOrder {
  """GraphQL field to sort on"""
  field: ColumnOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
GraphQL type for a combined field. Combined fields concatanate fields together into one string.
"""
type CombinedField implements Field & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """Columns downstream of this field"""
  downstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns downstream of this field. Recurse is not supported with pagination. Please use downstreamColumns instead.
  """
  downstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Tables downstream of this field"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this field. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases downstream of this field"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this field. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flpws downstream of this field"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flpws downstream of this field. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """downstream fields that reference this field"""
  downstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  downstream fields that reference this field. Recurse is not supported with
  pagination. Please use downstreamFields instead.
  """
  downstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]

  """
  Recurse is not supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]

  """
  Workbooks connected downstream from the field. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable!]!

  """
  Tables connected upstream from the field. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows connected upstream from the field"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows connected upstream from the field. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources connected upstream from the field"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """fields that are upstream of this field"""
  upstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field]!

  """
  fields that are upstream of this field. Recurse is not supported with pagination. Please use upstreamFields instead.
  """
  upstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """All upstream columns this field references"""
  upstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column]!

  """
  All upstream columns this field references. Recurse is not supported with pagination. Please use upstreamColumns instead.
  """
  upstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection
}

"""Filter by GraphQL field and given value"""
input CombinedField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum CombinedFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for CombinedField"""
type CombinedFieldsConnection {
  """List of nodes"""
  nodes: [CombinedField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input CombinedFieldSortOrder {
  """GraphQL field to sort on"""
  field: CombinedFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
GraphQL type for a combined set field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_sets_create.html#Combine
"""
type CombinedSetField implements Field & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Delimiter used to separate members of the two sets. Usually ',' or ';'"""
  delimiter: String

  """
  How the sets are combined. 'All Members in Both Sets', 'Shared Members in Both Sets', or 'Except Shared Members'
  """
  combinationType: String

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """Columns downstream of this field"""
  downstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns downstream of this field. Recurse is not supported with pagination. Please use downstreamColumns instead.
  """
  downstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Tables downstream of this field"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this field. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases downstream of this field"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this field. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flpws downstream of this field"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flpws downstream of this field. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """downstream fields that reference this field"""
  downstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  downstream fields that reference this field. Recurse is not supported with
  pagination. Please use downstreamFields instead.
  """
  downstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]

  """
  Recurse is not supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]

  """
  Workbooks connected downstream from the field. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable!]!

  """
  Tables connected upstream from the field. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows connected upstream from the field"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows connected upstream from the field. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources connected upstream from the field"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """fields that are upstream of this field"""
  upstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field]!

  """
  fields that are upstream of this field. Recurse is not supported with pagination. Please use upstreamFields instead.
  """
  upstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """All upstream columns this field references"""
  upstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column]!

  """
  All upstream columns this field references. Recurse is not supported with pagination. Please use upstreamColumns instead.
  """
  upstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection
}

"""Filter by GraphQL field and given value"""
input CombinedSetField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum CombinedSetFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for CombinedSetField"""
type CombinedSetFieldsConnection {
  """List of nodes"""
  nodes: [CombinedSetField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input CombinedSetFieldSortOrder {
  """GraphQL field to sort on"""
  field: CombinedSetFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
 table that represents the result of evaluating a custom SQL query. These
"tables" are owned by the Tableau data source (embedded or published) which
contains the SQL query, so they only exist within that data source.
"""
type CustomSQLTable implements Table {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """A custom SQL tables is always embedded in Tableau content"""
  isEmbedded: Boolean

  """User modifiable description of this table"""
  description: String

  """True if this query table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the query table being marked as certified"""
  certificationNote: String

  """Text of the query"""
  query: String!

  """Columns contained in this table"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns contained in this table. Recurse is not supported with pagination. Please use columns instead.
  """
  columnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Actual tables that this query references."""
  tables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable!]!

  """
  Actual tables that this query references.. Recurse is not supported with pagination. Please use tables instead.
  """
  tablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """Databases upstream of this table"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream of this table. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables upstream of this table"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream of this table. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows upstream of this table"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows upstream of this table. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream of this table"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream of this table. Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Databases downstream of this table"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this table. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables downstream of this table"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this table. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows downstream of this table"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows downstream of this table. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Published datasources connected to the table"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Published datasources connected to the table. Recurse is not supported with
  pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Workbooks connected to the table"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks connected to the table. Recurse is not supported with pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Sheets connected to the table"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected to the table"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection
}

"""Filter by GraphQL field and given value"""
input CustomSQLTable_Filter {
  """True if this query table has been marked as certified"""
  isCertified: Boolean

  """True if this query table has been marked as certified"""
  isCertifiedWithin: [Boolean]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum CustomSQLTableOrderField {
  """Sort by columns count"""
  COLUMNS_COUNT

  """Sort by downstreamDatasources count"""
  DOWNSTREAM_DATASOURCES_COUNT

  """Sort by downstreamWorkbooks count"""
  DOWNSTREAM_WORKBOOKS_COUNT

  """Sort by id"""
  ID

  """Sort by isCertified"""
  IS_CERTIFIED

  """Sort by name"""
  NAME
}

"""Connection Type for CustomSQLTable"""
type CustomSQLTablesConnection {
  """List of nodes"""
  nodes: [CustomSQLTable!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input CustomSQLTableSortOrder {
  """GraphQL field to sort on"""
  field: CustomSQLTableOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" dashboard contained in a published workbook."""
type Dashboard implements View {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """
  Locally unique identifier used for the REST API on the Tableau Server (Null if worksheet is hidden in Workbook)
  """
  luid: String

  """Server path to dashboard"""
  path: String!

  """Time the dashboard was created"""
  createdAt: DateTime

  """Time the dashboard was updated"""
  updatedAt: DateTime

  """Index of view; the order it appears in the workbook"""
  index: Int

  """Sheets referenced by this dashboard"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets referenced by this dashboard"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """The workbook that contains this view"""
  workbook: Workbook
}

"""Filter by GraphQL field and given value"""
input Dashboard_Filter {
  """Server path to dashboard"""
  path: String

  """Server path to dashboard"""
  pathWithin: [String]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum DashboardOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by path"""
  PATH
}

"""Connection Type for Dashboard"""
type DashboardsConnection {
  """List of nodes"""
  nodes: [Dashboard!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DashboardSortOrder {
  """GraphQL field to sort on"""
  field: DashboardOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" database containing tables"""
interface Database {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """
  Vizportal ID of this database, for use in client-to-server communications
  """
  vizportalId: String!

  """Name shown in server and desktop clients"""
  name: String!

  """Connection type shortname"""
  connectionType: String!

  """
  True if this database is embedded in Tableau content, e.g., a packaged workbook
  """
  isEmbedded: Boolean

  """User modifiable description of this database"""
  description: String

  """Contact for this database"""
  contact: TableauUser

  """True if this database has been marked as certified"""
  isCertified: Boolean

  """True if this database has its permission locked"""
  isControlledPermissionsEnabled: Boolean

  """Notes related to this database being marked as certified"""
  certificationNote: String

  """User who marked this database as certified"""
  certifier: TableauUser

  """True if the database has an active data quality warning"""
  hasActiveWarning: Boolean!

  """The optional data quality warning on a database"""
  dataQualityWarning: DataQualityWarning

  """Databases upstream of this database"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream of this database. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables upstream of this database"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream of this database. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows upstream of this database"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows upstream of this database. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream of this database"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream of this database. Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Databases downstream of this database"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this database. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables downstream of this database"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this database. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows downstream of this database"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows downstream of this database. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Published datasources connected to the database"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Published datasources connected to the database. Recurse is not supported with
  pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Workbooks connected to the database"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks connected to the database. Recurse is not supported with pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Sheets connected to the database"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected to the database"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Owners connected to the database"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Owners connected to the database"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables belonging to this database"""
  tables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable]

  """
  Tables belonging to this database. Recurse is not supported with pagination. Please use tables instead.
  """
  tablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection
}

"""Filter by GraphQL field and given value"""
input Database_Filter {
  """True if the database has an active data quality warning"""
  hasActiveWarning: Boolean

  """True if the database has an active data quality warning"""
  hasActiveWarningWithin: [Boolean]

  """True if this database has been marked as certified"""
  isCertified: Boolean

  """True if this database has been marked as certified"""
  isCertifiedWithin: [Boolean]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  True if this database is embedded in Tableau content, e.g., a packaged workbook
  """
  isEmbedded: Boolean

  """
  True if this database is embedded in Tableau content, e.g., a packaged workbook
  """
  isEmbeddedWithin: [Boolean]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """Connection type shortname"""
  connectionType: String

  """Connection type shortname"""
  connectionTypeWithin: [String]

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum DatabaseOrderField {
  """Sort by downstreamDatasources count"""
  DOWNSTREAM_DATASOURCES_COUNT

  """Sort by downstreamWorkbooks count"""
  DOWNSTREAM_WORKBOOKS_COUNT

  """Sort by connectionType"""
  CONNECTION_TYPE

  """Sort by hasActiveWarning"""
  HAS_ACTIVE_WARNING

  """Sort by id"""
  ID

  """Sort by isCertified"""
  IS_CERTIFIED

  """Sort by isEmbedded"""
  IS_EMBEDDED

  """Sort by name"""
  NAME
}

"""Connection Type for Database"""
type DatabasesConnection {
  """List of nodes"""
  nodes: [Database!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

""" database server connection"""
type DatabaseServer implements Database & Warnable {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """
  Vizportal ID of this database, for use in client-to-server communications
  """
  vizportalId: String!

  """Name shown in server and desktop clients"""
  name: String!

  """Connection type shortname"""
  connectionType: String!

  """A database server is never embedded in Tableau content"""
  isEmbedded: Boolean

  """Hostname of the database"""
  hostName: String!

  """Port number of the database connection"""
  port: Int

  """User modifiable description of this database"""
  description: String

  """Contact for this database"""
  contact: TableauUser

  """True if this database has been marked as certified"""
  isCertified: Boolean

  """True if this database has its permission locked"""
  isControlledPermissionsEnabled: Boolean

  """Notes related to this database being marked as certified"""
  certificationNote: String

  """User who marked this database as certified"""
  certifier: TableauUser

  """True if the database has an active data quality warning"""
  hasActiveWarning: Boolean!

  """The optional data quality warning on a database"""
  dataQualityWarning: DataQualityWarning

  """Databases upstream of this database"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream of this database. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables upstream of this database"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream of this database. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows upstream of this database"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows upstream of this database. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream of this database"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream of this database. Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Databases downstream of this database"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this database. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables downstream of this database"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this database. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows downstream of this database"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows downstream of this database. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Published datasources connected to the database"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Published datasources connected to the database. Recurse is not supported with
  pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Workbooks connected to the database"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks connected to the database. Recurse is not supported with pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Sheets connected to the database"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected to the database"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Owners connected to the database"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Owners connected to the database"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables belonging to this database"""
  tables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable]

  """
  Tables belonging to this database. Recurse is not supported with pagination. Please use tables instead.
  """
  tablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection
}

"""Filter by GraphQL field and given value"""
input DatabaseServer_Filter {
  """Hostname of the database"""
  hostName: String

  """Hostname of the database"""
  hostNameWithin: [String]

  """True if the database has an active data quality warning"""
  hasActiveWarning: Boolean

  """True if the database has an active data quality warning"""
  hasActiveWarningWithin: [Boolean]

  """True if this database has been marked as certified"""
  isCertified: Boolean

  """True if this database has been marked as certified"""
  isCertifiedWithin: [Boolean]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """A database server is never embedded in Tableau content"""
  isEmbedded: Boolean

  """A database server is never embedded in Tableau content"""
  isEmbeddedWithin: [Boolean]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """Connection type shortname"""
  connectionType: String

  """Connection type shortname"""
  connectionTypeWithin: [String]

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum DatabaseServerOrderField {
  """Sort by downstreamDatasources count"""
  DOWNSTREAM_DATASOURCES_COUNT

  """Sort by downstreamWorkbooks count"""
  DOWNSTREAM_WORKBOOKS_COUNT

  """Sort by connectionType"""
  CONNECTION_TYPE

  """Sort by hasActiveWarning"""
  HAS_ACTIVE_WARNING

  """Sort by hostName"""
  HOST_NAME

  """Sort by id"""
  ID

  """Sort by isCertified"""
  IS_CERTIFIED

  """Sort by isEmbedded"""
  IS_EMBEDDED

  """Sort by name"""
  NAME
}

"""Connection Type for DatabaseServer"""
type DatabaseServersConnection {
  """List of nodes"""
  nodes: [DatabaseServer!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DatabaseServerSortOrder {
  """GraphQL field to sort on"""
  field: DatabaseServerOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DatabaseSortOrder {
  """GraphQL field to sort on"""
  field: DatabaseOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" table that is contained in a database"""
type DatabaseTable implements Table & Warnable {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Vizportal ID of this table, for use in client-to-server communications"""
  vizportalId: String!

  """Name shown in server and desktop clients"""
  name: String!

  """True if this table is embedded in Tableau content"""
  isEmbedded: Boolean

  """Name of table schema"""
  schema: String

  """Fully qualified table name"""
  fullName: String

  """User modifiable description of this table"""
  description: String

  """Contact for this table"""
  contact: TableauUser

  """True if this database table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the database table being marked as certified"""
  certificationNote: String

  """User who marked this table as certified"""
  certifier: TableauUser

  """The database to which this table belongs"""
  database: Database

  """Columns contained in this table"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns contained in this table. Recurse is not supported with pagination. Please use columns instead.
  """
  columnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """True if the table has an active data quality warning"""
  hasActiveWarning: Boolean!

  """The optional data quality warning on a table"""
  dataQualityWarning: DataQualityWarning

  """Data quality warnings upstream from this table"""
  upstreamDataQualityWarnings(
    """Filter by GraphQL field and given value"""
    filter: DataQualityWarning_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DataQualityWarningSortOrder
  ): [DataQualityWarning!]!

  """Data quality warnings upstream from this table"""
  upstreamDataQualityWarningsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DataQualityWarning_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DataQualityWarningSortOrder
  ): DataQualityWarningsConnection

  """Databases upstream of this table"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream of this table. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables upstream of this table"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream of this table. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows upstream of this table"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows upstream of this table. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream of this table"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream of this table. Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Databases downstream of this table"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this table. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables downstream of this table"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this table. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows downstream of this table"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows downstream of this table. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Published datasources connected to the table"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Published datasources connected to the table. Recurse is not supported with
  pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets connected to the table"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected to the table"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks connected to the table"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks connected to the table. Recurse is not supported with pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """The custom SQL queries that reference this table"""
  referencedByQueries(
    """Filter by GraphQL field and given value"""
    filter: CustomSQLTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CustomSQLTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CustomSQLTable]

  """
  The custom SQL queries that reference this table. Recurse is not supported
  with pagination. Please use referencedByQueries instead.
  """
  referencedByQueriesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CustomSQLTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CustomSQLTableSortOrder
  ): CustomSQLTablesConnection
}

"""Filter by GraphQL field and given value"""
input DatabaseTable_Filter {
  """Name of table schema"""
  schema: String

  """Name of table schema"""
  schemaWithin: [String]

  """True if the table has an active data quality warning"""
  hasActiveWarning: Boolean

  """True if the table has an active data quality warning"""
  hasActiveWarningWithin: [Boolean]

  """True if this database table has been marked as certified"""
  isCertified: Boolean

  """True if this database table has been marked as certified"""
  isCertifiedWithin: [Boolean]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """Fully qualified table name"""
  fullName: String

  """Fully qualified table name"""
  fullNameWithin: [String]

  """True if this table is embedded in Tableau content"""
  isEmbedded: Boolean

  """True if this table is embedded in Tableau content"""
  isEmbeddedWithin: [Boolean]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum DatabaseTableOrderField {
  """Sort by columns count"""
  COLUMNS_COUNT

  """Sort by downstreamDatasources count"""
  DOWNSTREAM_DATASOURCES_COUNT

  """Sort by downstreamWorkbooks count"""
  DOWNSTREAM_WORKBOOKS_COUNT

  """Sort by fullName"""
  FULL_NAME

  """Sort by hasActiveWarning"""
  HAS_ACTIVE_WARNING

  """Sort by id"""
  ID

  """Sort by isCertified"""
  IS_CERTIFIED

  """Sort by isEmbedded"""
  IS_EMBEDDED

  """Sort by name"""
  NAME

  """Sort by schema"""
  SCHEMA
}

"""Connection Type for DatabaseTable"""
type DatabaseTablesConnection {
  """List of nodes"""
  nodes: [DatabaseTable!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DatabaseTableSortOrder {
  """GraphQL field to sort on"""
  field: DatabaseTableOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
Base GraphQL type for a field containing data. Most types of Fields will
implement this interface with exceptions like HierarchyField.
"""
interface DataField {
  """Data category of the field"""
  dataCategory: FieldRoleCategory!

  """Role of the field: 'dimension', 'measure' or 'unknown'"""
  role: FieldRole!

  """
  Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html
  """
  dataType: FieldDataType!

  """List of aliases, if any, for this field"""
  valueAliases(
    """Filter by GraphQL field and given value"""
    filter: ValueAlias_Filter
  ): [ValueAlias!]!

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection
}

"""Filter by GraphQL field and given value"""
input DataField_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID

  """Unique Identifier of object to retrieve"""
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum DataFieldOrderField {
  """Sort by dataCategory"""
  DATA_CATEGORY

  """Sort by dataType"""
  DATA_TYPE

  """Sort by id"""
  ID

  """Sort by role"""
  ROLE
}

"""Connection Type for DataField"""
type DataFieldsConnection {
  """List of nodes"""
  nodes: [DataField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DataFieldSortOrder {
  """GraphQL field to sort on"""
  field: DataFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" data quality warning associated with a content item"""
type DataQualityWarning {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID!

  """User who last updated this data quality warning"""
  author: TableauUser

  """Name of the user who last updated this data quality warning"""
  authorDisplayName: String

  """
  Vizportal ID of this data quality warning, for use in client-to-server communications
  """
  vizportalId: String!

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String!

  """True if the data quality warning is active"""
  isActive: Boolean!

  """Type of the data quality warning"""
  warningType: String!

  """Message of the data quality warning"""
  message: String!

  """Time the data quality warning was created"""
  createdAt: DateTime!

  """Time the data quality warning was last updated"""
  updatedAt: DateTime!

  """The asset that contains the data quality warning"""
  asset: Warnable
}

"""Filter by GraphQL field and given value"""
input DataQualityWarning_Filter {
  """Type of the data quality warning"""
  warningType: String

  """Type of the data quality warning"""
  warningTypeWithin: [String]

  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """True if the data quality warning is active"""
  isActive: Boolean

  """True if the data quality warning is active"""
  isActiveWithin: [Boolean]
}

"""Enum for fields that can be used for sorting"""
enum DataQualityWarningOrderField {
  """Sort by id"""
  ID

  """Sort by isActive"""
  IS_ACTIVE

  """Sort by warningType"""
  WARNING_TYPE
}

"""Connection Type for DataQualityWarning"""
type DataQualityWarningsConnection {
  """List of nodes"""
  nodes: [DataQualityWarning!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DataQualityWarningSortOrder {
  """GraphQL field to sort on"""
  field: DataQualityWarningOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
Root GraphQL type for embedded and published data sources

Data sources are a way to represent how Tableau Desktop and Tableau Server model
and connect to data. Data sources can be published separately, as a published
data source, or may be contained in a workbook as an embedded data source.

See https://onlinehelp.tableau.com/current/server/en-us/datasource.htm
"""
interface Datasource {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """
  True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)
  """
  hasUserReference: Boolean!

  """True if datasource contains extracted data"""
  hasExtracts: Boolean

  """Time an extract was last refreshed"""
  extractLastRefreshTime: DateTime

  """Fields usable in workbooks connected to this data source"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  Fields usable in workbooks connected to this data source. Recurse is not
  supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """Data source filters contained in this data source"""
  datasourceFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter!]!

  """Data source filters contained in this data source"""
  datasourceFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """Sheets downstream from this data source"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets downstream from this data source"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks downstream from this data source"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks downstream from this data source. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners downstream from this data source"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Workbook owners downstream from this data source"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables upstream from this data source"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream from this data source. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases upstream from this data source"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream from this data source. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection
}

"""Filter by GraphQL field and given value"""
input Datasource_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""
GraphQL type for a data source field. Data source fields can only exist in
embedded data sources which connect to a published data source. A data source
field is an embedded data source's 'layered' representation of a field that
already exists in the published data source and is mostly a copy of the field in
the published data source. Data source fields can get their own descriptions and
renames local to the embedded data source, but cannot otherwise be modified in
the embedded data source.
"""
type DatasourceField implements Field {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """
  Reference to a field from a published data source. This property only exists
  on Fields that are in an embedded data source with a connection to a published data source.
  """
  remoteField: Field

  """Columns downstream of this field"""
  downstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns downstream of this field. Recurse is not supported with pagination. Please use downstreamColumns instead.
  """
  downstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Tables downstream of this field"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this field. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases downstream of this field"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this field. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flpws downstream of this field"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flpws downstream of this field. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """downstream fields that reference this field"""
  downstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  downstream fields that reference this field. Recurse is not supported with
  pagination. Please use downstreamFields instead.
  """
  downstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]

  """
  Recurse is not supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]

  """
  Workbooks connected downstream from the field. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable!]!

  """
  Tables connected upstream from the field. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows connected upstream from the field"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows connected upstream from the field. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources connected upstream from the field"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """fields that are upstream of this field"""
  upstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field]!

  """
  fields that are upstream of this field. Recurse is not supported with pagination. Please use upstreamFields instead.
  """
  upstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """All upstream columns this field references"""
  upstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column]!

  """
  All upstream columns this field references. Recurse is not supported with pagination. Please use upstreamColumns instead.
  """
  upstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection
}

"""Filter by GraphQL field and given value"""
input DatasourceField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum DatasourceFieldOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for DatasourceField"""
type DatasourceFieldsConnection {
  """List of nodes"""
  nodes: [DatasourceField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DatasourceFieldSortOrder {
  """GraphQL field to sort on"""
  field: DatasourceFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
Data source filters include/exclude certain values from a single field to filter
out rows of data from this data source. For data security reasons, we don't
track the values used in the filter in this schema, but you can see the field
used in the filter.

See https://onlinehelp.tableau.com/current/pro/desktop/en-us/filtering_datasource.html
"""
type DatasourceFilter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Field used by this filter."""
  field: Field!

  """Data source that contains this datasource filter"""
  datasource: Datasource
}

"""Filter by GraphQL field and given value"""
input DatasourceFilter_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum DatasourceFilterOrderField {
  """Sort by id"""
  ID
}

"""Connection Type for DatasourceFilter"""
type DatasourceFiltersConnection {
  """List of nodes"""
  nodes: [DatasourceFilter!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DatasourceFilterSortOrder {
  """GraphQL field to sort on"""
  field: DatasourceFilterOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Enum for fields that can be used for sorting"""
enum DatasourceOrderField {
  """Sort by downstreamOwners count"""
  DOWNSTREAM_OWNERS_COUNT

  """Sort by downstreamWorkbooks count"""
  DOWNSTREAM_WORKBOOKS_COUNT

  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for Datasource"""
type DatasourcesConnection {
  """List of nodes"""
  nodes: [Datasource!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DatasourceSortOrder {
  """GraphQL field to sort on"""
  field: DatasourceOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""An RFC-3339 compliant DateTime Scalar"""
scalar DateTime

""" data source embedded in a workbook"""
type EmbeddedDatasource implements Datasource {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """
  True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)
  """
  hasUserReference: Boolean!

  """True if datasource contains extracted data"""
  hasExtracts: Boolean

  """Time an extract was last refreshed"""
  extractLastRefreshTime: DateTime

  """Fields, usually measures or dimensions, contained in the data source"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  Fields, usually measures or dimensions, contained in the data source. Recurse
  is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """Data source filters contained in this data source"""
  datasourceFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter!]!

  """Data source filters contained in this data source"""
  datasourceFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """Sheets downstream from this data source"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets downstream from this data source"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks downstream from this data source"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks downstream from this data source. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners downstream from this data source"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Workbook owners downstream from this data source"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Flows downstream from this data source"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows downstream from this data source. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Tables upstream from this data source"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream from this data source. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases upstream from this data source"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream from this data source. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows upstream from this data source"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows upstream from this data source. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream from this data source"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream from this data source. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Data quality warnings upstream from this data source"""
  upstreamDataQualityWarnings(
    """Filter by GraphQL field and given value"""
    filter: DataQualityWarning_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DataQualityWarningSortOrder
  ): [DataQualityWarning!]!

  """Data quality warnings upstream from this data source"""
  upstreamDataQualityWarningsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DataQualityWarning_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DataQualityWarningSortOrder
  ): DataQualityWarningsConnection

  """Workbook that contains these embedded datasources"""
  workbook: Workbook
}

"""Filter by GraphQL field and given value"""
input EmbeddedDatasource_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum EmbeddedDatasourceOrderField {
  """Sort by downstreamOwners count"""
  DOWNSTREAM_OWNERS_COUNT

  """Sort by downstreamWorkbooks count"""
  DOWNSTREAM_WORKBOOKS_COUNT

  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for EmbeddedDatasource"""
type EmbeddedDatasourcesConnection {
  """List of nodes"""
  nodes: [EmbeddedDatasource!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input EmbeddedDatasourceSortOrder {
  """GraphQL field to sort on"""
  field: EmbeddedDatasourceOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Base GraphQL type for a field"""
interface Field {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable!]!

  """
  Tables connected upstream from the field. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """Flows connected upstream from the field"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows connected upstream from the field. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream of this field"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream of this field. Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Columns downstream of this field"""
  downstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns downstream of this field. Recurse is not supported with pagination. Please use downstreamColumns instead.
  """
  downstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Tables downstream of this field"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this field. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases downstream of this field"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this field. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flpws downstream of this field"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flpws downstream of this field. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Downstream fields that reference this field"""
  downstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  Downstream fields that reference this field. Recurse is not supported with
  pagination. Please use downstreamFields instead.
  """
  downstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """Datasources connected downstream from this field"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]

  """
  Datasources connected downstream from this field. Recurse is not supported
  with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]

  """
  Workbooks connected downstream from the field. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """fields that are upstream of this field"""
  upstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field]!

  """
  fields that are upstream of this field. Recurse is not supported with pagination. Please use upstreamFields instead.
  """
  upstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """All upstream columns this field references"""
  upstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column]!

  """
  All upstream columns this field references. Recurse is not supported with pagination. Please use upstreamColumns instead.
  """
  upstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection
}

"""Filter by GraphQL field and given value"""
input Field_Filter {
  """Name shown in server"""
  name: String

  """Name shown in server"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Possible data types for a field."""
enum FieldDataType {
  INTEGER
  REAL
  STRING
  DATETIME
  DATE
  TUPLE
  SPATIAL
  BOOLEAN
  UNKNOWN
}

"""Filter by GraphQL field and given value"""
input FieldDataType_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID

  """Unique Identifier of object to retrieve"""
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum FieldOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""
Base GraphQL type for a field that references another field. For example, a
CalculatedField can reference a ColumnField in its formula.
"""
interface FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Fields referenced by this field"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  Fields referenced by this field. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable!]!

  """
  Tables connected upstream from the field. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows connected upstream from the field"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows connected upstream from the field. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection
}

"""Filter by GraphQL field and given value"""
input FieldReferencingField_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID

  """Unique Identifier of object to retrieve"""
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum FieldReferencingFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by id"""
  ID
}

"""Connection Type for FieldReferencingField"""
type FieldReferencingFieldsConnection {
  """List of nodes"""
  nodes: [FieldReferencingField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FieldReferencingFieldSortOrder {
  """GraphQL field to sort on"""
  field: FieldReferencingFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Possible roles of a field."""
enum FieldRole {
  DIMENSION
  MEASURE
  UNKNOWN
}

"""Filter by GraphQL field and given value"""
input FieldRole_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID

  """Unique Identifier of object to retrieve"""
  idWithin: [ID]
}

"""Possible categories of a field role."""
enum FieldRoleCategory {
  QUANTITATIVE
  NOMINAL
  ORDINAL
  UNKNOWN
}

"""Filter by GraphQL field and given value"""
input FieldRoleCategory_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID

  """Unique Identifier of object to retrieve"""
  idWithin: [ID]
}

"""Connection Type for Field"""
type FieldsConnection {
  """List of nodes"""
  nodes: [Field!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FieldSortOrder {
  """GraphQL field to sort on"""
  field: FieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" file connection"""
type File implements Database & Warnable {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """
  Vizportal ID of this database, for use in client-to-server communications
  """
  vizportalId: String!

  """Name shown in server and desktop clients"""
  name: String!

  """Connection type shortname"""
  connectionType: String!

  """
  True if this file is embedded in Tableau content, e.g., a packaged workbook
  """
  isEmbedded: Boolean

  """Path to file"""
  filePath: String!

  """User modifiable description of this database"""
  description: String

  """Contact for this database"""
  contact: TableauUser

  """True if this database has been marked as certified"""
  isCertified: Boolean

  """True if this database has its permission locked"""
  isControlledPermissionsEnabled: Boolean

  """Notes related to this database being marked as certified"""
  certificationNote: String

  """User who marked this database as certified"""
  certifier: TableauUser

  """True if the database has an active data quality warning"""
  hasActiveWarning: Boolean!

  """The optional data quality warning on a database"""
  dataQualityWarning: DataQualityWarning

  """Databases upstream of this database"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream of this database. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables upstream of this database"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream of this database. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows upstream of this database"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows upstream of this database. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream of this database"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream of this database. Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Databases downstream of this database"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this database. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables downstream of this database"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this database. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows downstream of this database"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows downstream of this database. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Published datasources connected to the database"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Published datasources connected to the database. Recurse is not supported with
  pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Workbooks connected to the database"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks connected to the database. Recurse is not supported with pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Sheets connected to the database"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected to the database"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Owners connected to the database"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Owners connected to the database"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables belonging to this database"""
  tables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable]

  """
  Tables belonging to this database. Recurse is not supported with pagination. Please use tables instead.
  """
  tablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection
}

"""Filter by GraphQL field and given value"""
input File_Filter {
  """True if the database has an active data quality warning"""
  hasActiveWarning: Boolean

  """True if the database has an active data quality warning"""
  hasActiveWarningWithin: [Boolean]

  """True if this database has been marked as certified"""
  isCertified: Boolean

  """True if this database has been marked as certified"""
  isCertifiedWithin: [Boolean]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  True if this file is embedded in Tableau content, e.g., a packaged workbook
  """
  isEmbedded: Boolean

  """
  True if this file is embedded in Tableau content, e.g., a packaged workbook
  """
  isEmbeddedWithin: [Boolean]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """Connection type shortname"""
  connectionType: String

  """Connection type shortname"""
  connectionTypeWithin: [String]

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum FileOrderField {
  """Sort by downstreamDatasources count"""
  DOWNSTREAM_DATASOURCES_COUNT

  """Sort by downstreamWorkbooks count"""
  DOWNSTREAM_WORKBOOKS_COUNT

  """Sort by connectionType"""
  CONNECTION_TYPE

  """Sort by hasActiveWarning"""
  HAS_ACTIVE_WARNING

  """Sort by id"""
  ID

  """Sort by isCertified"""
  IS_CERTIFIED

  """Sort by isEmbedded"""
  IS_EMBEDDED

  """Sort by name"""
  NAME
}

"""Connection Type for File"""
type FilesConnection {
  """List of nodes"""
  nodes: [File!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FileSortOrder {
  """GraphQL field to sort on"""
  field: FileOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
Flows are used to prepare data, which can include aggregation, cleaning, preprocessing, etc.
"""
type Flow implements Warnable {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Locally unique identifier used for the REST API on the Tableau Server"""
  uri: String!

  """VizPortal URL ID; used for URL generation"""
  vizportalUrlId: String!

  """The site in which the flow is visible and usable"""
  site: TableauSite

  """The ID of the project in which the flow is visible and usable"""
  projectVizportalUrlId: String!

  """The name of the project in which the flow is visible and usable"""
  projectName: String!

  """User who owns this flow"""
  owner: TableauUser

  """Fields that are inputs to this flow"""
  inputFields(
    """Filter by GraphQL field and given value"""
    filter: FlowInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowInputField!]!

  """
  Fields that are inputs to this flow. Recurse is not supported with pagination. Please use inputFields instead.
  """
  inputFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowInputFieldSortOrder
  ): FlowInputFieldsConnection

  """Fields that are outputs of this flow"""
  outputFields(
    """Filter by GraphQL field and given value"""
    filter: FlowOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowOutputField!]!

  """
  Fields that are outputs of this flow. Recurse is not supported with pagination. Please use outputFields instead.
  """
  outputFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputFieldSortOrder
  ): FlowOutputFieldsConnection

  """Output steps for this flow"""
  outputSteps(
    """Filter by GraphQL field and given value"""
    filter: FlowOutputStep_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputStepSortOrder
  ): [FlowOutputStep!]!

  """Output steps for this flow"""
  outputStepsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowOutputStep_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputStepSortOrder
  ): FlowOutputStepsConnection

  """Description of the flow"""
  description: String

  """True if the flow has an active data quality warning"""
  hasActiveWarning: Boolean!

  """The optional data quality warning on a flow"""
  dataQualityWarning: DataQualityWarning

  """Data quality warnings upstream from this flow"""
  upstreamDataQualityWarnings(
    """Filter by GraphQL field and given value"""
    filter: DataQualityWarning_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DataQualityWarningSortOrder
  ): [DataQualityWarning!]!

  """Data quality warnings upstream from this flow"""
  upstreamDataQualityWarningsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DataQualityWarning_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DataQualityWarningSortOrder
  ): DataQualityWarningsConnection

  """Databases that are upstream from this flow."""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases that are upstream from this flow.. Recurse is not supported with
  pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables that are upstream from this flow."""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables that are upstream from this flow.. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows that are upstream from this flow."""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows that are upstream from this flow.. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources that are upstream from this flow."""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources that are upstream from this flow.. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Flows that are downstream from this flow."""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows that are downstream from this flow.. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Published Data Sources that are downstream from this flow."""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Published Data Sources that are downstream from this flow.. Recurse is not
  supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Databases that are downstream from this flow."""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases that are downstream from this flow.. Recurse is not supported with
  pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables that are downstream from this flow."""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables that are downstream from this flow.. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Workbooks that are downstream from this flow"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks that are downstream from this flow. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Sheets that are downstream from this flow"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets that are downstream from this flow"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Owners that are downstream from this flow"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Owners that are downstream from this flow"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection
}

"""Filter by GraphQL field and given value"""
input Flow_Filter {
  """VizPortal URL ID; used for URL generation"""
  vizportalUrlId: String

  """VizPortal URL ID; used for URL generation"""
  vizportalUrlIdWithin: [String]

  """True if the flow has an active data quality warning"""
  hasActiveWarning: Boolean

  """True if the flow has an active data quality warning"""
  hasActiveWarningWithin: [Boolean]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """The name of the project in which the flow is visible and usable"""
  projectName: String

  """The name of the project in which the flow is visible and usable"""
  projectNameWithin: [String]
}

"""Column input field implementation"""
type FlowColumnInputField implements FlowInputField {
  """Unique identifier used by the metadata API"""
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Identifier internal to flow"""
  fieldId: String!

  """The underlying wrapped column"""
  column: Column

  """Fields that are children of this field"""
  childFields(
    """Filter by GraphQL field and given value"""
    filter: FlowOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowOutputField!]!

  """
  Fields that are children of this field. Recurse is not supported with pagination. Please use childFields instead.
  """
  childFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputFieldSortOrder
  ): FlowOutputFieldsConnection

  """Databases that are upstream from this outputField."""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases that are upstream from this outputField.. Recurse is not supported
  with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables that are upstream of this field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables that are upstream of this field. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows that are upstream from this outputField."""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows that are upstream from this outputField.. Recurse is not supported with
  pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """PublishedDatasources that are upstream from this outputField."""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  PublishedDatasources that are upstream from this outputField.. Recurse is not
  supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """A flow to which these fields input"""
  flow: Flow
}

"""Filter by GraphQL field and given value"""
input FlowColumnInputField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """Unique identifier used by the metadata API"""
  id: ID

  """Unique identifier used by the metadata API"""
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum FlowColumnInputFieldOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for FlowColumnInputField"""
type FlowColumnInputFieldsConnection {
  """List of nodes"""
  nodes: [FlowColumnInputField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FlowColumnInputFieldSortOrder {
  """GraphQL field to sort on"""
  field: FlowColumnInputFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Column output field implementation"""
type FlowColumnOutputField implements FlowOutputField {
  """Unique identifier used by the metadata API"""
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Identifier internal to flow"""
  fieldId: String!

  """The underlying wrapped column"""
  column: Column

  """Fields that are parents of this field"""
  parentFields(
    """Filter by GraphQL field and given value"""
    filter: FlowInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowInputField!]!

  """
  Fields that are parents of this field. Recurse is not supported with pagination. Please use parentFields instead.
  """
  parentFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowInputFieldSortOrder
  ): FlowInputFieldsConnection

  """Databases that are upstream from this outputField"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases that are upstream from this outputField. Recurse is not supported
  with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables that are upstream from this outputField"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables that are upstream from this outputField. Recurse is not supported with
  pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows that are upstream from this flow"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows that are upstream from this flow. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources that are upstream from this flow."""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources that are upstream from this flow.. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Databases that are downstream from this outputField"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases that are downstream from this outputField. Recurse is not supported
  with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables that are downstream from this outputField"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables that are downstream from this outputField. Recurse is not supported
  with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows that are downstream from this outputField"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows that are downstream from this outputField. Recurse is not supported with
  pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources that are downstream from this outputField"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources that are downstream from this outputField. Recurse is not
  supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Workbooks that are downstream from this outputField"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks that are downstream from this outputField. Recurse is not supported
  with pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Sheets that are downstream from this outputField"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets that are downstream from this outputField"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Owners that are downstream from this outputField"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Owners that are downstream from this outputField"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """The flow that outputs these fields"""
  flow(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow]

  """
  The flow that outputs these fields. Recurse is not supported with pagination. Please use flow instead.
  """
  flowConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """The flow output step that contains this field"""
  flowOutputStep: FlowOutputStep
}

"""Filter by GraphQL field and given value"""
input FlowColumnOutputField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """Unique identifier used by the metadata API"""
  id: ID

  """Unique identifier used by the metadata API"""
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum FlowColumnOutputFieldOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for FlowColumnOutputField"""
type FlowColumnOutputFieldsConnection {
  """List of nodes"""
  nodes: [FlowColumnOutputField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FlowColumnOutputFieldSortOrder {
  """GraphQL field to sort on"""
  field: FlowColumnOutputFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Field input field implementation"""
type FlowFieldInputField implements FlowInputField {
  """Unique identifier used by the metadata API"""
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Identifier internal to flow"""
  fieldId: String!

  """The underlying wrapped field"""
  field: Field

  """Fields that are children of this field"""
  childFields(
    """Filter by GraphQL field and given value"""
    filter: FlowOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowOutputField!]!

  """
  Fields that are children of this field. Recurse is not supported with pagination. Please use childFields instead.
  """
  childFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputFieldSortOrder
  ): FlowOutputFieldsConnection

  """Databases that are upstream from this outputField."""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases that are upstream from this outputField.. Recurse is not supported
  with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables that are upstream of this field."""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables that are upstream of this field.. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows that are upstream from this outputField."""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows that are upstream from this outputField.. Recurse is not supported with
  pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """A flow to which these fields input"""
  flow: Flow
}

"""Filter by GraphQL field and given value"""
input FlowFieldInputField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """Unique identifier used by the metadata API"""
  id: ID

  """Unique identifier used by the metadata API"""
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum FlowFieldInputFieldOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for FlowFieldInputField"""
type FlowFieldInputFieldsConnection {
  """List of nodes"""
  nodes: [FlowFieldInputField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FlowFieldInputFieldSortOrder {
  """GraphQL field to sort on"""
  field: FlowFieldInputFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Field output field implementation"""
type FlowFieldOutputField implements FlowOutputField {
  """Unique identifier used by the metadata API"""
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Identifier internal to flow"""
  fieldId: String!

  """The underlying wrapped field"""
  field: Field

  """Fields that are parents of this field"""
  parentFields(
    """Filter by GraphQL field and given value"""
    filter: FlowInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowInputField!]!

  """
  Fields that are parents of this field. Recurse is not supported with pagination. Please use parentFields instead.
  """
  parentFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowInputFieldSortOrder
  ): FlowInputFieldsConnection

  """Databases that are upstream from this outputField"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases that are upstream from this outputField. Recurse is not supported
  with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables that are upstream from this outputField"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables that are upstream from this outputField. Recurse is not supported with
  pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows that are upstream from this flow."""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows that are upstream from this flow.. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources that are upstream from this output field."""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources that are upstream from this output field.. Recurse is not
  supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Databases that are downstream from this outputField"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases that are downstream from this outputField. Recurse is not supported
  with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables that are downstream from this outputField"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables that are downstream from this outputField. Recurse is not supported
  with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows that are downstream from this outputField"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows that are downstream from this outputField. Recurse is not supported with
  pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources that are downstream from this outputField"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources that are downstream from this outputField. Recurse is not
  supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Workbooks that are downstream from this outputField"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks that are downstream from this outputField. Recurse is not supported
  with pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Sheets that are downstream from this outputField"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets that are downstream from this outputField"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Owners that are downstream from this outputField"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Owners that are downstream from this outputField"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """The flow that outputs these fields"""
  flow(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow]

  """
  The flow that outputs these fields. Recurse is not supported with pagination. Please use flow instead.
  """
  flowConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """The flow output step that contains this field"""
  flowOutputStep: FlowOutputStep
}

"""Filter by GraphQL field and given value"""
input FlowFieldOutputField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """Unique identifier used by the metadata API"""
  id: ID

  """Unique identifier used by the metadata API"""
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum FlowFieldOutputFieldOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for FlowFieldOutputField"""
type FlowFieldOutputFieldsConnection {
  """List of nodes"""
  nodes: [FlowFieldOutputField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FlowFieldOutputFieldSortOrder {
  """GraphQL field to sort on"""
  field: FlowFieldOutputFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" wrapper for an input field contained in a published flow."""
interface FlowInputField {
  """Unique identifier used by the metadata API"""
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Fields that are children of this field"""
  childFields(
    """Filter by GraphQL field and given value"""
    filter: FlowOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowOutputField!]!

  """
  Fields that are children of this field. Recurse is not supported with pagination. Please use childFields instead.
  """
  childFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputFieldSortOrder
  ): FlowOutputFieldsConnection

  """Databases that are upstream from this outputField."""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases that are upstream from this outputField.. Recurse is not supported
  with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables that are upstream of this field."""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables that are upstream of this field.. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """A flow to which these fields input"""
  flow: Flow
}

"""Filter by GraphQL field and given value"""
input FlowInputField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """Unique identifier used by the metadata API"""
  id: ID

  """Unique identifier used by the metadata API"""
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum FlowInputFieldOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for FlowInputField"""
type FlowInputFieldsConnection {
  """List of nodes"""
  nodes: [FlowInputField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FlowInputFieldSortOrder {
  """GraphQL field to sort on"""
  field: FlowInputFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Enum for fields that can be used for sorting"""
enum FlowOrderField {
  """Sort by hasActiveWarning"""
  HAS_ACTIVE_WARNING

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by projectName"""
  PROJECT_NAME

  """Sort by vizportalUrlId"""
  VIZPORTAL_URL_ID
}

""" wrapper for an output field contained in a published flow."""
interface FlowOutputField {
  """Unique identifier used by the metadata API"""
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Fields that are parents of this field"""
  parentFields(
    """Filter by GraphQL field and given value"""
    filter: FlowInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowInputField!]!

  """
  Fields that are parents of this field. Recurse is not supported with pagination. Please use parentFields instead.
  """
  parentFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowInputFieldSortOrder
  ): FlowInputFieldsConnection

  """Databases that are upstream from this outputField"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases that are upstream from this outputField. Recurse is not supported
  with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables that are upstream from this outputField"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables that are upstream from this outputField. Recurse is not supported with
  pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows that are upstream from this outputField."""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows that are upstream from this outputField.. Recurse is not supported with
  pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources that are upstream from this outputField"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources that are upstream from this outputField. Recurse is not supported
  with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Databases that are downstream from this outputField"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases that are downstream from this outputField. Recurse is not supported
  with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables that are downstream from this outputField"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables that are downstream from this outputField. Recurse is not supported
  with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows that are downstream from this outputField"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows that are downstream from this outputField. Recurse is not supported with
  pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources that are downstream from this outputField"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources that are downstream from this outputField. Recurse is not
  supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Workbooks that are downstream from this outputField"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks that are downstream from this outputField. Recurse is not supported
  with pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Sheets that are downstream from this outputField"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets that are downstream from this outputField"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Owners that are downstream from this outputField"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Owners that are downstream from this outputField"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """The flow that outputs these fields"""
  flow(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow]

  """
  The flow that outputs these fields. Recurse is not supported with pagination. Please use flow instead.
  """
  flowConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """The flow output step that contains this field"""
  flowOutputStep: FlowOutputStep
}

"""Filter by GraphQL field and given value"""
input FlowOutputField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """Unique identifier used by the metadata API"""
  id: ID

  """Unique identifier used by the metadata API"""
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum FlowOutputFieldOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for FlowOutputField"""
type FlowOutputFieldsConnection {
  """List of nodes"""
  nodes: [FlowOutputField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FlowOutputFieldSortOrder {
  """GraphQL field to sort on"""
  field: FlowOutputFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" flow output step"""
type FlowOutputStep {
  """Unique identifier used by the metadata API"""
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Identifier internal to flow"""
  stepId: String!

  """Fields output by this step"""
  outputFields(
    """Filter by GraphQL field and given value"""
    filter: FlowOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowOutputField!]!

  """
  Fields output by this step. Recurse is not supported with pagination. Please use outputFields instead.
  """
  outputFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputFieldSortOrder
  ): FlowOutputFieldsConnection

  """The flow that contains this output step"""
  flow: Flow
}

"""Filter by GraphQL field and given value"""
input FlowOutputStep_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """Unique identifier used by the metadata API"""
  id: ID

  """Unique identifier used by the metadata API"""
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum FlowOutputStepOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for FlowOutputStep"""
type FlowOutputStepsConnection {
  """List of nodes"""
  nodes: [FlowOutputStep!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FlowOutputStepSortOrder {
  """GraphQL field to sort on"""
  field: FlowOutputStepOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Connection Type for Flow"""
type FlowsConnection {
  """List of nodes"""
  nodes: [Flow!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FlowSortOrder {
  """GraphQL field to sort on"""
  field: FlowOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
GraphQL type for a group field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_groups_creating.html
"""
type GroupField implements Field & DataField & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Data category of the field"""
  dataCategory: FieldRoleCategory!

  """Role of the field: 'dimension', 'measure' or 'unknown'"""
  role: FieldRole!

  """
  Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html
  """
  dataType: FieldDataType!

  """List of aliases, if any, for this field"""
  valueAliases(
    """Filter by GraphQL field and given value"""
    filter: ValueAlias_Filter
  ): [ValueAlias!]!

  """
  Field has an 'Other' group. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_groups_creating.html#Include
  """
  hasOther: Boolean!

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """Columns downstream of this field"""
  downstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns downstream of this field. Recurse is not supported with pagination. Please use downstreamColumns instead.
  """
  downstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Tables downstream of this field"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this field. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases downstream of this field"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this field. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flpws downstream of this field"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flpws downstream of this field. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """downstream fields that reference this field"""
  downstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  downstream fields that reference this field. Recurse is not supported with
  pagination. Please use downstreamFields instead.
  """
  downstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]

  """
  Recurse is not supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]

  """
  Workbooks connected downstream from the field. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable!]!

  """
  Tables connected upstream from the field. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows connected upstream from the field"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows connected upstream from the field. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources connected upstream from the field"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """fields that are upstream of this field"""
  upstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field]!

  """
  fields that are upstream of this field. Recurse is not supported with pagination. Please use upstreamFields instead.
  """
  upstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """All upstream columns this field references"""
  upstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column]!

  """
  All upstream columns this field references. Recurse is not supported with pagination. Please use upstreamColumns instead.
  """
  upstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection
}

"""Filter by GraphQL field and given value"""
input GroupField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum GroupFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by dataCategory"""
  DATA_CATEGORY

  """Sort by dataType"""
  DATA_TYPE

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by role"""
  ROLE
}

"""Connection Type for GroupField"""
type GroupFieldsConnection {
  """List of nodes"""
  nodes: [GroupField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input GroupFieldSortOrder {
  """GraphQL field to sort on"""
  field: GroupFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
GraphQL type for a hierarchy. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/qs_hierarchies.html
"""
type HierarchyField implements Field & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """Columns downstream of this field"""
  downstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns downstream of this field. Recurse is not supported with pagination. Please use downstreamColumns instead.
  """
  downstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Tables downstream of this field"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this field. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases downstream of this field"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this field. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flpws downstream of this field"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flpws downstream of this field. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """downstream fields that reference this field"""
  downstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  downstream fields that reference this field. Recurse is not supported with
  pagination. Please use downstreamFields instead.
  """
  downstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]

  """
  Recurse is not supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]

  """
  Workbooks connected downstream from the field. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable!]!

  """
  Tables connected upstream from the field. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows connected upstream from the field"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows connected upstream from the field. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources connected upstream from the field"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """fields that are upstream of this field"""
  upstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field]!

  """
  fields that are upstream of this field. Recurse is not supported with pagination. Please use upstreamFields instead.
  """
  upstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """All upstream columns this field references"""
  upstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column]!

  """
  All upstream columns this field references. Recurse is not supported with pagination. Please use upstreamColumns instead.
  """
  upstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection
}

"""Filter by GraphQL field and given value"""
input HierarchyField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum HierarchyFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for HierarchyField"""
type HierarchyFieldsConnection {
  """List of nodes"""
  nodes: [HierarchyField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input HierarchyFieldSortOrder {
  """GraphQL field to sort on"""
  field: HierarchyFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""General object for sorting"""
enum OrderDirection {
  """Sort in an ascending order."""
  ASC

  """Sort in a descending order."""
  DESC
}

"""Information about pagination in a connection"""
type PageInfo {
  """Indicates if there are more objects to fetch"""
  hasNextPage: Boolean!

  """Cursor to use in subsequent query to fetch next page of objects"""
  endCursor: String
}

"""
Tableau Parameter. For more info see https://onlinehelp.tableau.com/current/pro/desktop/en-us/parameters_create.html
"""
type Parameter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name of parameter"""
  name: String!

  """Name of the parameter's parent"""
  parentName: String!

  """Published data source that contains this parameter"""
  datasource: PublishedDatasource

  """The bin field that references this parameter"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this parameter. Recurse is not supported with
  pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """The calculated field that references this parameter"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this parameter. Recurse is not supported
  with pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The set field that this parameter references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this parameter references. Recurse is not supported with
  pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """Workbook that contains this parameter"""
  workbook: Workbook
}

"""Filter by GraphQL field and given value"""
input Parameter_Filter {
  """Name of the parameter's parent"""
  parentName: String

  """Name of the parameter's parent"""
  parentNameWithin: [String]

  """Name of parameter"""
  name: String

  """Name of parameter"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum ParameterOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by parentName"""
  PARENT_NAME
}

"""Connection Type for Parameter"""
type ParametersConnection {
  """List of nodes"""
  nodes: [Parameter!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input ParameterSortOrder {
  """GraphQL field to sort on"""
  field: ParameterOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" Tableau data source that has been published separately to Tableau Server. It can be used by multiple workbooks.
"""
type PublishedDatasource implements Datasource & Warnable {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """
  True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)
  """
  hasUserReference: Boolean!

  """True if datasource contains extracted data"""
  hasExtracts: Boolean

  """Time an extract was last refreshed"""
  extractLastRefreshTime: DateTime

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String!

  """Fields usable in workbooks connected to this data source"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  Fields usable in workbooks connected to this data source. Recurse is not
  supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """Data source filters contained in this data source"""
  datasourceFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter!]!

  """Data source filters contained in this data source"""
  datasourceFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """List of parameters, if any, used in this data source"""
  parameters(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ParameterSortOrder
  ): [Parameter!]!

  """List of parameters, if any, used in this data source"""
  parametersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ParameterSortOrder
  ): ParametersConnection

  """The site which contains this published data source"""
  site: TableauSite!

  """The ID of the project that contains this published data source."""
  projectVizportalUrlId: String!

  """The name of the project that contains this published data source."""
  projectName: String!

  """User who owns this data source"""
  owner: TableauUser!

  """True if this data source has been marked as certified"""
  isCertified: Boolean!

  """User who marked this data source as certified"""
  certifier: TableauUser

  """Notes related to the data source being marked as certified"""
  certificationNote: String

  """Name of the user who marked this data source as certified"""
  certifierDisplayName: String

  """Description of the datasource"""
  description: String

  """True if the data source has an active data quality warning"""
  hasActiveWarning: Boolean!

  """The optional data quality warning on a published datasource"""
  dataQualityWarning: DataQualityWarning

  """Uri of the datasource"""
  uri: String!

  """
  Vizportal ID of this published datasource, for use in client-to-server communications
  """
  vizportalId: String!

  """VizPortal URL ID; used for URL generation"""
  vizportalUrlId: String!

  """Databases upstream from this data source"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream from this data source. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables upstream from this data source"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream from this data source. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows upstream from this data source"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows upstream from this data source. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream from this data source"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream from this data source. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Data quality warnings upstream from this data source"""
  upstreamDataQualityWarnings(
    """Filter by GraphQL field and given value"""
    filter: DataQualityWarning_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DataQualityWarningSortOrder
  ): [DataQualityWarning!]!

  """Data quality warnings upstream from this data source"""
  upstreamDataQualityWarningsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DataQualityWarning_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DataQualityWarningSortOrder
  ): DataQualityWarningsConnection

  """Tables downstream from this data source"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream from this data source. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases downstream from this data source"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream from this data source. Recurse is not supported with
  pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows downstream from this data source"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows downstream from this data source. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources downstream from this data source"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources downstream from this data source. Recurse is not supported with
  pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets downstream from this data source"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets downstream from this data source"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks downstream from this data source"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks downstream from this data source. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners downstream from this data source"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Workbook owners downstream from this data source"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection
}

"""Filter by GraphQL field and given value"""
input PublishedDatasource_Filter {
  """True if the data source has an active data quality warning"""
  hasActiveWarning: Boolean

  """True if the data source has an active data quality warning"""
  hasActiveWarningWithin: [Boolean]

  """VizPortal URL ID; used for URL generation"""
  vizportalUrlId: String

  """VizPortal URL ID; used for URL generation"""
  vizportalUrlIdWithin: [String]

  """True if this data source has been marked as certified"""
  isCertified: Boolean

  """True if this data source has been marked as certified"""
  isCertifiedWithin: [Boolean]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """The name of the project that contains this published data source."""
  projectName: String

  """The name of the project that contains this published data source."""
  projectNameWithin: [String]
}

"""Enum for fields that can be used for sorting"""
enum PublishedDatasourceOrderField {
  """Sort by downstreamOwners count"""
  DOWNSTREAM_OWNERS_COUNT

  """Sort by downstreamWorkbooks count"""
  DOWNSTREAM_WORKBOOKS_COUNT

  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by owner count"""
  OWNER_COUNT

  """Sort by hasActiveWarning"""
  HAS_ACTIVE_WARNING

  """Sort by id"""
  ID

  """Sort by isCertified"""
  IS_CERTIFIED

  """Sort by name"""
  NAME

  """Sort by projectName"""
  PROJECT_NAME

  """Sort by vizportalUrlId"""
  VIZPORTAL_URL_ID
}

"""Connection Type for PublishedDatasource"""
type PublishedDatasourcesConnection {
  """List of nodes"""
  nodes: [PublishedDatasource!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input PublishedDatasourceSortOrder {
  """GraphQL field to sort on"""
  field: PublishedDatasourceOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Query root for Metadata GraphQL interface"""
type Query {
  """Fetches Fields by filtering on id or name"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): [Field!]!

  """Fetches Datasources by filtering on id or name"""
  datasources(
    """Filter by GraphQL field and given value"""
    filter: Datasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceSortOrder
  ): [Datasource!]!

  """Fetches Tables by filtering on id or name"""
  tables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): [Table!]!

  """Fetches Views by filtering on id or name"""
  views(
    """Filter by GraphQL field and given value"""
    filter: View_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ViewSortOrder
  ): [View!]!

  """Fetches Databases by filtering on id or name"""
  databases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): [Database!]!

  """Fetches PublishedDatasources by filtering on id or name"""
  publishedDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): [PublishedDatasource!]!

  """Fetches CustomSQLTables by filtering on id or name"""
  customSQLTables(
    """Filter by GraphQL field and given value"""
    filter: CustomSQLTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CustomSQLTableSortOrder
  ): [CustomSQLTable!]!

  """Fetches DatasourceFilters by filtering on id or name"""
  datasourceFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter!]!

  """Fetches Parameters by filtering on id or name"""
  parameters(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ParameterSortOrder
  ): [Parameter!]!

  """Fetches BinFields by filtering on id or name"""
  binFields(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): [BinField!]!

  """Fetches CalculatedFields by filtering on id or name"""
  calculatedFields(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): [CalculatedField!]!

  """Fetches ColumnFields by filtering on id or name"""
  columnFields(
    """Filter by GraphQL field and given value"""
    filter: ColumnField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnFieldSortOrder
  ): [ColumnField!]!

  """Fetches CombinedFields by filtering on id or name"""
  combinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): [CombinedField!]!

  """Fetches CombinedSetFields by filtering on id or name"""
  combinedSetFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): [CombinedSetField!]!

  """Fetches DatasourceFields by filtering on id or name"""
  datasourceFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): [DatasourceField!]!

  """Fetches GroupFields by filtering on id or name"""
  groupFields(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): [GroupField!]!

  """Fetches SetFields by filtering on id or name"""
  setFields(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): [SetField!]!

  """Fetches HierarchyFields by filtering on id or name"""
  hierarchyFields(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): [HierarchyField!]!

  """Fetches TableauSites by filtering on id or name"""
  tableauSites(
    """Filter by GraphQL field and given value"""
    filter: TableauSite_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauSiteSortOrder
  ): [TableauSite!]!

  """Fetches TableauUsers by filtering on id or name"""
  tableauUsers(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Fetches Columns by filtering on id or name"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): [Column!]!

  """Fetches Workbooks by filtering on id or name"""
  workbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): [Workbook!]!

  """Fetches Sheets by filtering on id or name"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Fetches Dashboards by filtering on id or name"""
  dashboards(
    """Filter by GraphQL field and given value"""
    filter: Dashboard_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DashboardSortOrder
  ): [Dashboard!]!

  """Fetches EmbeddedDatasources by filtering on id or name"""
  embeddedDatasources(
    """Filter by GraphQL field and given value"""
    filter: EmbeddedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: EmbeddedDatasourceSortOrder
  ): [EmbeddedDatasource!]!

  """Fetches DatabaseTables by filtering on id or name"""
  databaseTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): [DatabaseTable!]!

  """Fetches DatabaseServers by filtering on id or name"""
  databaseServers(
    """Filter by GraphQL field and given value"""
    filter: DatabaseServer_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseServerSortOrder
  ): [DatabaseServer!]!

  """Fetches CloudFiles by filtering on id or name"""
  cloudFiles(
    """Filter by GraphQL field and given value"""
    filter: CloudFile_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CloudFileSortOrder
  ): [CloudFile!]!

  """Fetches Files by filtering on id or name"""
  files(
    """Filter by GraphQL field and given value"""
    filter: File_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FileSortOrder
  ): [File!]!

  """Fetches WebDataConnectors by filtering on id or name"""
  webDataConnectors(
    """Filter by GraphQL field and given value"""
    filter: WebDataConnector_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WebDataConnectorSortOrder
  ): [WebDataConnector!]!

  """Fetches Flows by filtering on id or name"""
  flows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): [Flow!]!

  """Fetches FlowFieldInputFields by filtering on id or name"""
  flowFieldInputFields(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): [FlowFieldInputField!]!

  """Fetches FlowColumnInputFields by filtering on id or name"""
  flowColumnInputFields(
    """Filter by GraphQL field and given value"""
    filter: FlowColumnInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowColumnInputFieldSortOrder
  ): [FlowColumnInputField!]!

  """Fetches FlowColumnOutputFields by filtering on id or name"""
  flowColumnOutputFields(
    """Filter by GraphQL field and given value"""
    filter: FlowColumnOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowColumnOutputFieldSortOrder
  ): [FlowColumnOutputField!]!

  """Fetches FlowFieldOutputFields by filtering on id or name"""
  flowFieldOutputFields(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): [FlowFieldOutputField!]!

  """Fetches FlowOutputSteps by filtering on id or name"""
  flowOutputSteps(
    """Filter by GraphQL field and given value"""
    filter: FlowOutputStep_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputStepSortOrder
  ): [FlowOutputStep!]!

  """Fetch Fields with support for pagination"""
  fieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): FieldsConnection!

  """Fetch Datasources with support for pagination"""
  datasourcesConnection(
    """Filter by GraphQL field and given value"""
    filter: Datasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): DatasourcesConnection!

  """Fetch Tables with support for pagination"""
  tablesConnection(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): TablesConnection!

  """Fetch Views with support for pagination"""
  viewsConnection(
    """Filter by GraphQL field and given value"""
    filter: View_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ViewSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): ViewsConnection!

  """Fetch Databases with support for pagination"""
  databasesConnection(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): DatabasesConnection!

  """Fetch PublishedDatasources with support for pagination"""
  publishedDatasourcesConnection(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): PublishedDatasourcesConnection!

  """Fetch CustomSQLTables with support for pagination"""
  customSQLTablesConnection(
    """Filter by GraphQL field and given value"""
    filter: CustomSQLTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CustomSQLTableSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): CustomSQLTablesConnection!

  """Fetch DatasourceFilters with support for pagination"""
  datasourceFiltersConnection(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): DatasourceFiltersConnection!

  """Fetch Parameters with support for pagination"""
  parametersConnection(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ParameterSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): ParametersConnection!

  """Fetch BinFields with support for pagination"""
  binFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): BinFieldsConnection!

  """Fetch CalculatedFields with support for pagination"""
  calculatedFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): CalculatedFieldsConnection!

  """Fetch ColumnFields with support for pagination"""
  columnFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: ColumnField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): ColumnFieldsConnection!

  """Fetch CombinedFields with support for pagination"""
  combinedFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): CombinedFieldsConnection!

  """Fetch CombinedSetFields with support for pagination"""
  combinedSetFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): CombinedSetFieldsConnection!

  """Fetch DatasourceFields with support for pagination"""
  datasourceFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): DatasourceFieldsConnection!

  """Fetch GroupFields with support for pagination"""
  groupFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): GroupFieldsConnection!

  """Fetch SetFields with support for pagination"""
  setFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): SetFieldsConnection!

  """Fetch HierarchyFields with support for pagination"""
  hierarchyFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): HierarchyFieldsConnection!

  """Fetch TableauSites with support for pagination"""
  tableauSitesConnection(
    """Filter by GraphQL field and given value"""
    filter: TableauSite_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauSiteSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): TableauSitesConnection!

  """Fetch TableauUsers with support for pagination"""
  tableauUsersConnection(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): TableauUsersConnection!

  """Fetch Columns with support for pagination"""
  columnsConnection(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): ColumnsConnection!

  """Fetch Workbooks with support for pagination"""
  workbooksConnection(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): WorkbooksConnection!

  """Fetch Sheets with support for pagination"""
  sheetsConnection(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): SheetsConnection!

  """Fetch Dashboards with support for pagination"""
  dashboardsConnection(
    """Filter by GraphQL field and given value"""
    filter: Dashboard_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DashboardSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): DashboardsConnection!

  """Fetch EmbeddedDatasources with support for pagination"""
  embeddedDatasourcesConnection(
    """Filter by GraphQL field and given value"""
    filter: EmbeddedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: EmbeddedDatasourceSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): EmbeddedDatasourcesConnection!

  """Fetch DatabaseTables with support for pagination"""
  databaseTablesConnection(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): DatabaseTablesConnection!

  """Fetch DatabaseServers with support for pagination"""
  databaseServersConnection(
    """Filter by GraphQL field and given value"""
    filter: DatabaseServer_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseServerSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): DatabaseServersConnection!

  """Fetch CloudFiles with support for pagination"""
  cloudFilesConnection(
    """Filter by GraphQL field and given value"""
    filter: CloudFile_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CloudFileSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): CloudFilesConnection!

  """Fetch Files with support for pagination"""
  filesConnection(
    """Filter by GraphQL field and given value"""
    filter: File_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FileSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): FilesConnection!

  """Fetch WebDataConnectors with support for pagination"""
  webDataConnectorsConnection(
    """Filter by GraphQL field and given value"""
    filter: WebDataConnector_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WebDataConnectorSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): WebDataConnectorsConnection!

  """Fetch Flows with support for pagination"""
  flowsConnection(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): FlowsConnection!

  """Fetch FlowFieldInputFields with support for pagination"""
  flowFieldInputFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): FlowFieldInputFieldsConnection!

  """Fetch FlowColumnInputFields with support for pagination"""
  flowColumnInputFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: FlowColumnInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowColumnInputFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): FlowColumnInputFieldsConnection!

  """Fetch FlowColumnOutputFields with support for pagination"""
  flowColumnOutputFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: FlowColumnOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowColumnOutputFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): FlowColumnOutputFieldsConnection!

  """Fetch FlowFieldOutputFields with support for pagination"""
  flowFieldOutputFieldsConnection(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): FlowFieldOutputFieldsConnection!

  """Fetch FlowOutputSteps with support for pagination"""
  flowOutputStepsConnection(
    """Filter by GraphQL field and given value"""
    filter: FlowOutputStep_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowOutputStepSortOrder

    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int
  ): FlowOutputStepsConnection!
}

"""
Possible types of remote types

Types correspond to OLEDB types here: https://referencesource.microsoft.com/#system.data/System/Data/OleDb/OLEDB_Enum.cs,364"

Types prefixed with 'WDC' correspond to Tableau's Web Data Connector types:
https://tableau.github.io/webdataconnector/docs/api_ref.html#webdataconnectorapi.datatypeenum
"""
enum RemoteType {
  EMPTY
  NULL
  I2
  I4
  R4
  R8
  CY
  DATE
  BSTR
  IDISPATCH
  ERROR
  BOOL
  VARIANT
  IUNKNOWN
  DECIMAL
  UI1
  ARRAY
  BYREF
  I1
  UI2
  UI4
  I8
  UI8
  GUID
  VECTOR
  FILETIME
  RESERVED
  BYTES
  STR
  WSTR
  NUMERIC
  UDT
  DBDATE
  DBTIME
  DBTIMESTAMP
  HCHAPTER
  PROPVARIANT
  VARNUMERIC
  WDC_INT
  WDC_FLOAT
  WDC_STRING
  WDC_DATETIME
  WDC_BOOL
  WDC_DATE
  WDC_GEOMETRY
}

"""Filter by GraphQL field and given value"""
input RemoteType_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID

  """Unique Identifier of object to retrieve"""
  idWithin: [ID]
}

"""
GraphQL type for a set field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_sets_create.html
"""
type SetField implements Field & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """List of parameters, if any, used in this field"""
  parameters(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ParameterSortOrder
  ): [Parameter!]!

  """List of parameters, if any, used in this field"""
  parametersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ParameterSortOrder
  ): ParametersConnection

  """Columns downstream of this field"""
  downstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns downstream of this field. Recurse is not supported with pagination. Please use downstreamColumns instead.
  """
  downstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Tables downstream of this field"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this field. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Databases downstream of this field"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this field. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flpws downstream of this field"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flpws downstream of this field. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """downstream fields that reference this field"""
  downstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  downstream fields that reference this field. Recurse is not supported with
  pagination. Please use downstreamFields instead.
  """
  downstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]

  """
  Recurse is not supported with pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]

  """
  Workbooks connected downstream from the field. Recurse is not supported with
  pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable!]!

  """
  Tables connected upstream from the field. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Flows connected upstream from the field"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows connected upstream from the field. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources connected upstream from the field"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources connected upstream from the field. Recurse is not supported with
  pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldReferencingFieldSortOrder
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFilterSortOrder
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: BinFieldSortOrder
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedFieldSortOrder
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CombinedSetFieldSortOrder
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatasourceFieldSortOrder
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: GroupFieldSortOrder
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SetFieldSortOrder
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: HierarchyFieldSortOrder
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """A flow input field that wraps this field"""
  referencedByFlowFieldInputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldInputField]

  """
  A flow input field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldInputField instead.
  """
  referencedByFlowFieldInputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldInputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldInputFieldSortOrder
  ): FlowFieldInputFieldsConnection

  """A flow output field that wraps this field"""
  referencedByFlowFieldOutputField(
    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FlowFieldOutputField]

  """
  A flow output field that wraps this field. Recurse is not supported with
  pagination. Please use referencedByFlowFieldOutputField instead.
  """
  referencedByFlowFieldOutputFieldConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FlowFieldOutputField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowFieldOutputFieldSortOrder
  ): FlowFieldOutputFieldsConnection

  """fields that are upstream of this field"""
  upstreamFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field]!

  """
  fields that are upstream of this field. Recurse is not supported with pagination. Please use upstreamFields instead.
  """
  upstreamFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """All upstream columns this field references"""
  upstreamColumns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column]!

  """
  All upstream columns this field references. Recurse is not supported with pagination. Please use upstreamColumns instead.
  """
  upstreamColumnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection
}

"""Filter by GraphQL field and given value"""
input SetField_Filter {
  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum SetFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for SetField"""
type SetFieldsConnection {
  """List of nodes"""
  nodes: [SetField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input SetFieldSortOrder {
  """GraphQL field to sort on"""
  field: SetFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" sheet contained in a published workbook."""
type Sheet implements View {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """
  Locally unique identifier used for the REST API on the Tableau Server (Null if worksheet is hidden in Workbook)
  """
  luid: String

  """Server path to sheet"""
  path: String!

  """Time the sheet was created"""
  createdAt: DateTime

  """Time the sheet was updated"""
  updatedAt: DateTime

  """Index of view; the order it appears in the workbook"""
  index: Int

  """
  Calculated fields which were created on this sheet, e.g. in the rows or
  columns shelves and which may not be used on other sheets that use this
  embedded data source
  """
  worksheetFields(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  Calculated fields which were created on this sheet, e.g. in the rows or
  columns shelves and which may not be used on other sheets that use this
  embedded data source. Recurse is not supported with pagination. Please use
  worksheetFields instead.
  """
  worksheetFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: CalculatedFieldSortOrder
  ): CalculatedFieldsConnection

  """
  Fields that are contained in an embedded data source and are also referenced
  by the worksheet. If a worksheet uses calculated fields (or any other
  FieldReferencingField), this list will also include all of the referenced fields.
  """
  datasourceFields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field]

  """
  Fields that are contained in an embedded data source and are also referenced
  by the worksheet. If a worksheet uses calculated fields (or any other
  FieldReferencingField), this list will also include all of the referenced
  fields.. Recurse is not supported with pagination. Please use datasourceFields instead.
  """
  datasourceFieldsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FieldSortOrder
  ): FieldsConnection

  """The workbook that contains this view"""
  workbook: Workbook

  """Dashboards that contain this sheet"""
  containedInDashboards(
    """Filter by GraphQL field and given value"""
    filter: Dashboard_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DashboardSortOrder
  ): [Dashboard]

  """Dashboards that contain this sheet"""
  containedInDashboardsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Dashboard_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DashboardSortOrder
  ): DashboardsConnection
}

"""Filter by GraphQL field and given value"""
input Sheet_Filter {
  """Server path to sheet"""
  path: String

  """Server path to sheet"""
  pathWithin: [String]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum SheetOrderField {
  """Sort by datasourceFields count"""
  DATASOURCE_FIELDS_COUNT

  """Sort by worksheetFields count"""
  WORKSHEET_FIELDS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by path"""
  PATH
}

"""Connection Type for Sheet"""
type SheetsConnection {
  """List of nodes"""
  nodes: [Sheet!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input SheetSortOrder {
  """GraphQL field to sort on"""
  field: SheetOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" table containing columns"""
interface Table {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """
  True if this table is embedded in Tableau content, e.g., a packaged workbook
  """
  isEmbedded: Boolean

  """User modifiable description of this table"""
  description: String

  """True if this table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the table being marked as certified"""
  certificationNote: String

  """Columns contained in this table"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Column!]!

  """
  Columns contained in this table. Recurse is not supported with pagination. Please use columns instead.
  """
  columnsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ColumnSortOrder
  ): ColumnsConnection

  """Databases upstream of this table"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream of this table. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables upstream of this table"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream of this table. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows upstream of this table"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows upstream of this table. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream of this table"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream of this table. Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Databases downstream of this table"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this table. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables downstream of this table"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this table. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows downstream of this table"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows downstream of this table. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Published datasources connected to the table"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Published datasources connected to the table. Recurse is not supported with
  pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Workbooks connected to the table"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks connected to the table. Recurse is not supported with pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Sheets connected to the table"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected to the table"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection
}

"""Filter by GraphQL field and given value"""
input Table_Filter {
  """True if this table has been marked as certified"""
  isCertified: Boolean

  """True if this table has been marked as certified"""
  isCertifiedWithin: [Boolean]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """Filter the output based on text query."""
  text: String
}

"""Site on Tableau server"""
type TableauSite {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID!

  """URI of this site, e.g., 'sites/4'"""
  uri: String!

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String!

  """Name shown in server"""
  name: String!

  """The published data sources that are part of this site"""
  publishedDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource]

  """
  The published data sources that are part of this site. Recurse is not
  supported with pagination. Please use publishedDatasources instead.
  """
  publishedDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """The workbooks that are part of this site"""
  workbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook]

  """
  The workbooks that are part of this site. Recurse is not supported with pagination. Please use workbooks instead.
  """
  workbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """The flows that are part of this site"""
  flows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow]

  """
  The flows that are part of this site. Recurse is not supported with pagination. Please use flows instead.
  """
  flowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection
}

"""Filter by GraphQL field and given value"""
input TableauSite_Filter {
  """Name shown in server"""
  name: String

  """Name shown in server"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum TableauSiteOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for TableauSite"""
type TableauSitesConnection {
  """List of nodes"""
  nodes: [TableauSite!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input TableauSiteSortOrder {
  """GraphQL field to sort on"""
  field: TableauSiteOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""User on a site on Tableau server"""
type TableauUser {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID!

  """URI of this user, e.g., 'sites/1/users/1396'"""
  uri: String!

  """Vizportal ID of this user, for use in client-to-server communications"""
  vizportalId: String!

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String!

  """Username of this user"""
  username: String!

  """Display name of this user"""
  name: String

  """Domain this user belongs to"""
  domain: String!

  """Email address of this user"""
  email: String

  """The databases that this user is the contact for"""
  contactForDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database]

  """
  The databases that this user is the contact for. Recurse is not supported with
  pagination. Please use contactForDatabases instead.
  """
  contactForDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """The databases that this user has certified"""
  certifiedDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database]

  """
  The databases that this user has certified. Recurse is not supported with
  pagination. Please use certifiedDatabases instead.
  """
  certifiedDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """The published data sources that belong to this user"""
  ownedDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource]

  """
  The published data sources that belong to this user. Recurse is not supported
  with pagination. Please use ownedDatasources instead.
  """
  ownedDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """The published data sources that this user has certified"""
  certifiedDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource]

  """
  The published data sources that this user has certified. Recurse is not
  supported with pagination. Please use certifiedDatasources instead.
  """
  certifiedDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """The workbooks that belong to this user"""
  ownedWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook]

  """
  The workbooks that belong to this user. Recurse is not supported with pagination. Please use ownedWorkbooks instead.
  """
  ownedWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """The tables that this user is the contact for"""
  contactForTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable]

  """
  The tables that this user is the contact for. Recurse is not supported with
  pagination. Please use contactForTables instead.
  """
  contactForTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """The tables that this user has certified"""
  certifiedTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable]

  """
  The tables that this user has certified. Recurse is not supported with pagination. Please use certifiedTables instead.
  """
  certifiedTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection

  """The flows that belong to this user"""
  ownedFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow]

  """
  The flows that belong to this user. Recurse is not supported with pagination. Please use ownedFlows instead.
  """
  ownedFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection
}

"""Filter by GraphQL field and given value"""
input TableauUser_Filter {
  """Domain this user belongs to"""
  domain: String

  """Domain this user belongs to"""
  domainWithin: [String]

  """Display name of this user"""
  name: String

  """Display name of this user"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """Email address of this user"""
  email: String

  """Email address of this user"""
  emailWithin: [String]

  """Username of this user"""
  username: String

  """Username of this user"""
  usernameWithin: [String]
}

"""Enum for fields that can be used for sorting"""
enum TableauUserOrderField {
  """Sort by domain"""
  DOMAIN

  """Sort by email"""
  EMAIL

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by username"""
  USERNAME
}

"""Connection Type for TableauUser"""
type TableauUsersConnection {
  """List of nodes"""
  nodes: [TableauUser!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input TableauUserSortOrder {
  """GraphQL field to sort on"""
  field: TableauUserOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Enum for fields that can be used for sorting"""
enum TableOrderField {
  """Sort by columns count"""
  COLUMNS_COUNT

  """Sort by downstreamDatasources count"""
  DOWNSTREAM_DATASOURCES_COUNT

  """Sort by downstreamWorkbooks count"""
  DOWNSTREAM_WORKBOOKS_COUNT

  """Sort by id"""
  ID

  """Sort by isCertified"""
  IS_CERTIFIED

  """Sort by name"""
  NAME
}

"""Connection Type for Table"""
type TablesConnection {
  """List of nodes"""
  nodes: [Table!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input TableSortOrder {
  """GraphQL field to sort on"""
  field: TableOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
Value aliases are alternate names for members of a dimension that will be used
when displaying this dimension in a Tableau visualization. 
See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_fieldproperties_aliases_ex1editing.html
"""
type ValueAlias {
  """Original name of the member in dimension"""
  originalName: String!

  """New name of the member in dimension"""
  newName: String!
}

"""Filter by GraphQL field and given value"""
input ValueAlias_Filter {
  """Original name of the member in dimension"""
  originalName: String

  """Original name of the member in dimension"""
  originalNameWithin: [String]

  """New name of the member in dimension"""
  newName: String

  """New name of the member in dimension"""
  newNameWithin: [String]

  """Unique Identifier of object to retrieve"""
  id: ID

  """Unique Identifier of object to retrieve"""
  idWithin: [ID]
}

""" view contained in a published workbook. Views can be sheets, dashboards or stories.
"""
interface View {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """
  Locally unique identifier used for the REST API on the Tableau Server (Null if sheet is hidden in Workbook)
  """
  luid: String

  """Server path to view"""
  path: String!

  """Time the view was created"""
  createdAt: DateTime

  """Time the view was updated"""
  updatedAt: DateTime

  """Index of view; the order it appears in the workbook"""
  index: Int

  """The workbook that contains this view"""
  workbook: Workbook
}

"""Filter by GraphQL field and given value"""
input View_Filter {
  """Server path to view"""
  path: String

  """Server path to view"""
  pathWithin: [String]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum ViewOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by path"""
  PATH
}

"""Connection Type for View"""
type ViewsConnection {
  """List of nodes"""
  nodes: [View!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input ViewSortOrder {
  """GraphQL field to sort on"""
  field: ViewOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" content item that has an optional data quality warning"""
interface Warnable {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID!

  """True if the content has an active data quality warning"""
  hasActiveWarning: Boolean!

  """The optional data quality warning on a content item"""
  dataQualityWarning: DataQualityWarning
}

"""Filter by GraphQL field and given value"""
input Warnable_Filter {
  """True if the content has an active data quality warning"""
  hasActiveWarning: Boolean

  """True if the content has an active data quality warning"""
  hasActiveWarningWithin: [Boolean]

  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  idWithin: [ID]
}

"""Enum for fields that can be used for sorting"""
enum WarnableOrderField {
  """Sort by hasActiveWarning"""
  HAS_ACTIVE_WARNING

  """Sort by id"""
  ID
}

"""Connection Type for Warnable"""
type WarnablesConnection {
  """List of nodes"""
  nodes: [Warnable!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input WarnableSortOrder {
  """GraphQL field to sort on"""
  field: WarnableOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" web data connector"""
type WebDataConnector implements Database & Warnable {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID!

  """
  Vizportal ID of this database, for use in client-to-server communications
  """
  vizportalId: String!

  """Name shown in server and desktop clients"""
  name: String!

  """The type of web data connector"""
  connectionType: String!

  """A web data connector is always embedded in Tableau content"""
  isEmbedded: Boolean

  """The url for the sign-in page of the web data connector"""
  connectorUrl: String!

  """User modifiable description of this database"""
  description: String

  """Contact for this database"""
  contact: TableauUser

  """True if this web data connector table has been marked as certified"""
  isCertified: Boolean

  """True if this database has its permission locked"""
  isControlledPermissionsEnabled: Boolean

  """
  Notes related to the web data connector table being marked as certified
  """
  certificationNote: String

  """User who marked this database as certified"""
  certifier: TableauUser

  """True if the database has an active data quality warning"""
  hasActiveWarning: Boolean!

  """The optional data quality warning on a database"""
  dataQualityWarning: DataQualityWarning

  """Databases upstream of this database"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream of this database. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables upstream of this database"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream of this database. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows upstream of this database"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows upstream of this database. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream of this database"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream of this database. Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Databases downstream of this database"""
  downstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases downstream of this database. Recurse is not supported with pagination. Please use downstreamDatabases instead.
  """
  downstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables downstream of this database"""
  downstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables downstream of this database. Recurse is not supported with pagination. Please use downstreamTables instead.
  """
  downstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows downstream of this database"""
  downstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows downstream of this database. Recurse is not supported with pagination. Please use downstreamFlows instead.
  """
  downstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Published datasources connected to the database"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Published datasources connected to the database. Recurse is not supported with
  pagination. Please use downstreamDatasources instead.
  """
  downstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection

  """Workbooks connected to the database"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Workbook!]!

  """
  Workbooks connected to the database. Recurse is not supported with pagination. Please use downstreamWorkbooks instead.
  """
  downstreamWorkbooksConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: WorkbookSortOrder
  ): WorkbooksConnection

  """Sheets connected to the database"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!

  """Sheets connected to the database"""
  downstreamSheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Owners connected to the database"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): [TableauUser!]!

  """Owners connected to the database"""
  downstreamOwnersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableauUserSortOrder
  ): TableauUsersConnection

  """Tables belonging to this database"""
  tables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatabaseTable]

  """
  Tables belonging to this database. Recurse is not supported with pagination. Please use tables instead.
  """
  tablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseTableSortOrder
  ): DatabaseTablesConnection
}

"""Filter by GraphQL field and given value"""
input WebDataConnector_Filter {
  """True if the database has an active data quality warning"""
  hasActiveWarning: Boolean

  """True if the database has an active data quality warning"""
  hasActiveWarningWithin: [Boolean]

  """True if this web data connector table has been marked as certified"""
  isCertified: Boolean

  """True if this web data connector table has been marked as certified"""
  isCertifiedWithin: [Boolean]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """A web data connector is always embedded in Tableau content"""
  isEmbedded: Boolean

  """A web data connector is always embedded in Tableau content"""
  isEmbeddedWithin: [Boolean]

  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """The type of web data connector"""
  connectionType: String

  """The type of web data connector"""
  connectionTypeWithin: [String]

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum WebDataConnectorOrderField {
  """Sort by downstreamDatasources count"""
  DOWNSTREAM_DATASOURCES_COUNT

  """Sort by downstreamWorkbooks count"""
  DOWNSTREAM_WORKBOOKS_COUNT

  """Sort by connectionType"""
  CONNECTION_TYPE

  """Sort by hasActiveWarning"""
  HAS_ACTIVE_WARNING

  """Sort by id"""
  ID

  """Sort by isCertified"""
  IS_CERTIFIED

  """Sort by isEmbedded"""
  IS_EMBEDDED

  """Sort by name"""
  NAME
}

"""Connection Type for WebDataConnector"""
type WebDataConnectorsConnection {
  """List of nodes"""
  nodes: [WebDataConnector!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input WebDataConnectorSortOrder {
  """GraphQL field to sort on"""
  field: WebDataConnectorOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
Workbooks are used to package up Tableau visualizations (which are called
"sheets" in the Metadata API) and data models (which are called "embedded data
sources" when they are owned by a workbook). 
"""
type Workbook {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String!

  """The site in which the workbook is visible and usable"""
  site: TableauSite!

  """The ID of the project in which the workbook is visible and usable."""
  projectVizportalUrlId: String!

  """The name of the project in which the workbook is visible and usable."""
  projectName: String!

  """User who owns this workbook"""
  owner: TableauUser!

  """Views that are contained in this workbook"""
  views(
    """Filter by GraphQL field and given value"""
    filter: View_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ViewSortOrder
  ): [View!]!

  """Views that are contained in this workbook"""
  viewsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: View_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ViewSortOrder
  ): ViewsConnection
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): [Sheet!]!
  sheetsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: SheetSortOrder
  ): SheetsConnection

  """Data sources that are embedded in this workbook"""
  embeddedDatasources(
    """Filter by GraphQL field and given value"""
    filter: EmbeddedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: EmbeddedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [EmbeddedDatasource!]!

  """
  Data sources that are embedded in this workbook. Recurse is not supported with
  pagination. Please use embeddedDatasources instead.
  """
  embeddedDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: EmbeddedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: EmbeddedDatasourceSortOrder
  ): EmbeddedDatasourcesConnection

  """Parameters that are contained in this workbook"""
  parameters(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ParameterSortOrder
  ): [Parameter!]!

  """Parameters that are contained in this workbook"""
  parametersConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: ParameterSortOrder
  ): ParametersConnection

  """Description of the workbook"""
  description: String

  """Uri of the workbook"""
  uri: String!

  """VizPortal URL ID; used for URL generation"""
  vizportalUrlId: String!

  """Time the workbook was created"""
  createdAt: DateTime

  """Time the workbook was updated"""
  updatedAt: DateTime

  """Data quality warnings upstream from this workbook"""
  upstreamDataQualityWarnings(
    """Filter by GraphQL field and given value"""
    filter: DataQualityWarning_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DataQualityWarningSortOrder
  ): [DataQualityWarning!]!

  """Data quality warnings upstream from this workbook"""
  upstreamDataQualityWarningsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DataQualityWarning_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DataQualityWarningSortOrder
  ): DataQualityWarningsConnection

  """Databases upstream from this workbook"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Database!]!

  """
  Databases upstream from this workbook. Recurse is not supported with pagination. Please use upstreamDatabases instead.
  """
  upstreamDatabasesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: DatabaseSortOrder
  ): DatabasesConnection

  """Tables upstream from this workbook"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Table!]!

  """
  Tables upstream from this workbook. Recurse is not supported with pagination. Please use upstreamTables instead.
  """
  upstreamTablesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: TableSortOrder
  ): TablesConnection

  """Flows upstream from this workbook"""
  upstreamFlows(
    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Flow!]!

  """
  Flows upstream from this workbook. Recurse is not supported with pagination. Please use upstreamFlows instead.
  """
  upstreamFlowsConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Flow_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: FlowSortOrder
  ): FlowsConnection

  """Datasources upstream from this workbook"""
  upstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [PublishedDatasource!]!

  """
  Datasources upstream from this workbook. Recurse is not supported with pagination. Please use upstreamDatasources instead.
  """
  upstreamDatasourcesConnection(
    """
    The cursor to receive the next page of objects. If no cursor is supplied it
    will start at the beginning of the list. Offset can not be set at the same
    time. This is the preferred API to use if possible as it is faster.
    """
    after: String

    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: PublishedDatasourceSortOrder
  ): PublishedDatasourcesConnection
}

"""Filter by GraphQL field and given value"""
input Workbook_Filter {
  """VizPortal URL ID; used for URL generation"""
  vizportalUrlId: String

  """VizPortal URL ID; used for URL generation"""
  vizportalUrlIdWithin: [String]

  """Name shown in server and desktop clients"""
  name: String

  """Name shown in server and desktop clients"""
  nameWithin: [String]

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  idWithin: [ID]

  """The name of the project in which the workbook is visible and usable."""
  projectName: String

  """The name of the project in which the workbook is visible and usable."""
  projectNameWithin: [String]
}

"""Enum for fields that can be used for sorting"""
enum WorkbookOrderField {
  """Sort by embeddedDatasources count"""
  EMBEDDED_DATASOURCES_COUNT

  """Sort by owner count"""
  OWNER_COUNT

  """Sort by sheets count"""
  SHEETS_COUNT

  """Sort by views count"""
  VIEWS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by projectName"""
  PROJECT_NAME

  """Sort by vizportalUrlId"""
  VIZPORTAL_URL_ID
}

"""Connection Type for Workbook"""
type WorkbooksConnection {
  """List of nodes"""
  nodes: [Workbook!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input WorkbookSortOrder {
  """GraphQL field to sort on"""
  field: WorkbookOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

