"""This directive allows results to be deferred during execution"""
directive @defer on FIELD

"""Base GraphQL type for a field containing analytics metadata"""
interface AnalyticsField {
  """Default format for number or date"""
  defaultFormat: String

  """
  For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html
  """
  semanticRole: String

  """
  Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs
  """
  aggregation: String

  """For the percentile aggregation, the percentile number"""
  aggregationParam: String

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection
}

"""Filter by GraphQL field and given value"""
input AnalyticsField_Filter {
  """Default format for number or date"""
  defaultFormat: String

  """
  For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html
  """
  semanticRole: String

  """
  Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs
  """
  aggregation: String

  """For the percentile aggregation, the percentile number"""
  aggregationParam: String

  """Unique Identifier of object to retrieve"""
  id: ID
}

"""Enum for fields that can be used for sorting"""
enum AnalyticsFieldOrderField {
  """Sort by id"""
  ID
}

"""Connection Type for AnalyticsField"""
type AnalyticsFieldsConnection {
  """List of nodes"""
  nodes: [AnalyticsField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input AnalyticsFieldSortOrder {
  """GraphQL field to sort on"""
  field: AnalyticsFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Base GraphQL type for a field"""
interface BaseField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]

  """Workbooks connected downstream from the field"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables connected upstream from the field"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases connected upstream from the field"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection
}

"""Filter by GraphQL field and given value"""
input BaseField_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server"""
  name: String

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String
}

"""Enum for fields that can be used for sorting"""
enum BaseFieldOrderField {
  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for BaseField"""
type BaseFieldsConnection {
  """List of nodes"""
  nodes: [BaseField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input BaseFieldSortOrder {
  """GraphQL field to sort on"""
  field: BaseFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
GraphQL type for a binned continuous measure field. See
https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_bins.html
"""
type BinField implements BaseField & DataField & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Data category of the field"""
  dataCategory: FieldRoleCategory!

  """Role of the field: 'dimension', 'measure' or 'unknown'"""
  role: FieldRole!

  """
  Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html
  """
  dataType: FieldDataType!

  """List of aliases, if any, for this field"""
  valueAliases(
    """Filter by GraphQL field and given value"""
    filter: ValueAlias_Filter
  ): [ValueAlias!]!

  """Formula of the calculated field"""
  formula: String

  """Size of the bin"""
  binSize: String

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]
  ): FieldsConnection

  """List of parameters, if any, used in this field"""
  parameters(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ParameterSortOrder!]
  ): [Parameter!]!

  """List of parameters, if any, used in this field"""
  parametersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ParameterSortOrder!]
  ): ParametersConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]

  """Workbooks connected downstream from the field"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables connected upstream from the field"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases connected upstream from the field"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection
}

"""Filter by GraphQL field and given value"""
input BinField_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Formula of the calculated field"""
  formula: String

  """Size of the bin"""
  binSize: String
}

"""Enum for fields that can be used for sorting"""
enum BinFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by dataCategory"""
  DATA_CATEGORY

  """Sort by dataType"""
  DATA_TYPE

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by role"""
  ROLE
}

"""Connection Type for BinField"""
type BinFieldsConnection {
  """List of nodes"""
  nodes: [BinField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input BinFieldSortOrder {
  """GraphQL field to sort on"""
  field: BinFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
GraphQL type for a calculated field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_calculatedfields.html
"""
type CalculatedField implements BaseField & DataField & AnalyticsField & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Data category of the field"""
  dataCategory: FieldRoleCategory!

  """Role of the field: 'dimension', 'measure' or 'unknown'"""
  role: FieldRole!

  """
  Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html
  """
  dataType: FieldDataType!

  """List of aliases, if any, for this field"""
  valueAliases(
    """Filter by GraphQL field and given value"""
    filter: ValueAlias_Filter
  ): [ValueAlias!]!

  """Default format for number or date"""
  defaultFormat: String

  """
  For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html
  """
  semanticRole: String

  """
  Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs
  """
  aggregation: String

  """For the percentile aggregation, the percentile number"""
  aggregationParam: String

  """Formula of the calculated field"""
  formula: String

  """
  True if Tableau automatically created this field. A list of autogenerated
  fields are here: https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_understanddatawindow.html#AutoFields
  """
  isAutoGenerated: Boolean!

  """
  True if field formula that involves a user function (for example, USERNAME or ISMEMBEROF)
  """
  hasUserReference: Boolean!

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]
  ): FieldsConnection

  """List of parameters, if any, used in this field"""
  parameters(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ParameterSortOrder!]
  ): [Parameter!]!

  """List of parameters, if any, used in this field"""
  parametersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ParameterSortOrder!]
  ): ParametersConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]

  """Workbooks connected downstream from the field"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables connected upstream from the field"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases connected upstream from the field"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """Sheet that contains this calculated field"""
  sheet: Sheet

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection
}

"""Filter by GraphQL field and given value"""
input CalculatedField_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Default format for number or date"""
  defaultFormat: String

  """
  For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html
  """
  semanticRole: String

  """
  Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs
  """
  aggregation: String

  """For the percentile aggregation, the percentile number"""
  aggregationParam: String

  """Formula of the calculated field"""
  formula: String

  """
  True if Tableau automatically created this field. A list of autogenerated
  fields are here: https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_understanddatawindow.html#AutoFields
  """
  isAutoGenerated: Boolean

  """
  True if field formula that involves a user function (for example, USERNAME or ISMEMBEROF)
  """
  hasUserReference: Boolean
}

"""Enum for fields that can be used for sorting"""
enum CalculatedFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by dataCategory"""
  DATA_CATEGORY

  """Sort by dataType"""
  DATA_TYPE

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by role"""
  ROLE
}

"""Connection Type for CalculatedField"""
type CalculatedFieldsConnection {
  """List of nodes"""
  nodes: [CalculatedField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input CalculatedFieldSortOrder {
  """GraphQL field to sort on"""
  field: CalculatedFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""GraphQL type for a table column"""
type Column {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name of column"""
  name: String!

  """User modifiable description of this column"""
  description: String

  """
  Remote type on the database. Types correspond to OLEDB types here: https://referencesource.microsoft.com/#system.data/System/Data/OleDb/OLEDB_Enum.cs,364
  """
  remoteType: RemoteType!

  """True if this column has been marked as certified"""
  isCertified: Boolean

  """Notes related to the column being marked as certified"""
  certificationNote: String

  """Sheets downstream from the column"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets downstream from the column"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks downstream from the column"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]!

  """Workbooks downstream from the column"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """
  Owners of workbooks and published datasources downstream from the column
  """
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]!

  """
  Owners of workbooks and published datasources downstream from the column
  """
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Published datasources downstream from the column"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): [PublishedDatasource!]!

  """Published datasources downstream from the column"""
  downstreamDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): PublishedDatasourcesConnection

  """The table that this column belongs to"""
  table: Table

  """The column field that references this column"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: ColumnField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [ColumnField]

  """
  The column field that references this column. Recurse is not supported with
  pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: ColumnField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnFieldSortOrder!]
  ): ColumnFieldsConnection

  """The actor who last modified the field 'isCertified'"""
  isCertified_modifyingUser: String
}

"""Filter by GraphQL field and given value"""
input Column_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name of column"""
  name: String

  """User modifiable description of this column"""
  description: String

  """True if this column has been marked as certified"""
  isCertified: Boolean

  """Notes related to the column being marked as certified"""
  certificationNote: String
}

"""
ColumnFields are a type of field which directly connects to a column in some type of table.
"""
type ColumnField implements BaseField & DataField & AnalyticsField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Data category of the field"""
  dataCategory: FieldRoleCategory!

  """Role of the field: 'dimension', 'measure' or 'unknown'"""
  role: FieldRole!

  """
  Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html
  """
  dataType: FieldDataType!

  """List of aliases, if any, for this field"""
  valueAliases(
    """Filter by GraphQL field and given value"""
    filter: ValueAlias_Filter
  ): [ValueAlias!]!

  """Default format for number or date"""
  defaultFormat: String

  """
  For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html
  """
  semanticRole: String

  """
  Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs
  """
  aggregation: String

  """For the percentile aggregation, the percentile number"""
  aggregationParam: String

  """List of columns, if any, that this field references"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): [Column!]!

  """List of columns, if any, that this field references"""
  columnsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): ColumnsConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]

  """Workbooks connected downstream from the field"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables connected upstream from the field"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases connected upstream from the field"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection
}

"""Filter by GraphQL field and given value"""
input ColumnField_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Default format for number or date"""
  defaultFormat: String

  """
  For geographic data, the geographic role of the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/maps_geographicroles.html
  """
  semanticRole: String

  """
  Default aggregation of the field, i.e. 'Sum', 'Average'. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/calculations_aggregation.html#AggFuncs
  """
  aggregation: String

  """For the percentile aggregation, the percentile number"""
  aggregationParam: String
}

"""Enum for fields that can be used for sorting"""
enum ColumnFieldOrderField {
  """Sort by columns count"""
  COLUMNS_COUNT

  """Sort by dataCategory"""
  DATA_CATEGORY

  """Sort by dataType"""
  DATA_TYPE

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by role"""
  ROLE
}

"""Connection Type for ColumnField"""
type ColumnFieldsConnection {
  """List of nodes"""
  nodes: [ColumnField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input ColumnFieldSortOrder {
  """GraphQL field to sort on"""
  field: ColumnFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Enum for fields that can be used for sorting"""
enum ColumnOrderField {
  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for Column"""
type ColumnsConnection {
  """List of nodes"""
  nodes: [Column!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input ColumnSortOrder {
  """GraphQL field to sort on"""
  field: ColumnOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
GraphQL type for a combined field. Combined fields concatanate fields together into one string.
"""
type CombinedField implements BaseField & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]
  ): FieldsConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]

  """Workbooks connected downstream from the field"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables connected upstream from the field"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases connected upstream from the field"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection
}

"""Filter by GraphQL field and given value"""
input CombinedField_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String
}

"""Enum for fields that can be used for sorting"""
enum CombinedFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for CombinedField"""
type CombinedFieldsConnection {
  """List of nodes"""
  nodes: [CombinedField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input CombinedFieldSortOrder {
  """GraphQL field to sort on"""
  field: CombinedFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
GraphQL type for a combined set field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_sets_create.html#Combine
"""
type CombinedSetField implements BaseField & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Delimiter used to separate members of the two sets. Usually ',' or ';'"""
  delimiter: String

  """
  How the sets are combined. 'All Members in Both Sets', 'Shared Members in Both Sets', or 'Except Shared Members'
  """
  combinationType: String

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]
  ): FieldsConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]

  """Workbooks connected downstream from the field"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables connected upstream from the field"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases connected upstream from the field"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection
}

"""Filter by GraphQL field and given value"""
input CombinedSetField_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Delimiter used to separate members of the two sets. Usually ',' or ';'"""
  delimiter: String

  """
  How the sets are combined. 'All Members in Both Sets', 'Shared Members in Both Sets', or 'Except Shared Members'
  """
  combinationType: String
}

"""Enum for fields that can be used for sorting"""
enum CombinedSetFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for CombinedSetField"""
type CombinedSetFieldsConnection {
  """List of nodes"""
  nodes: [CombinedSetField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input CombinedSetFieldSortOrder {
  """GraphQL field to sort on"""
  field: CombinedSetFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
A database connection
@delegated directive denotes that this node type is owned by a different content provider,
nodes of this type won't be deleted when the containing graphlet gets deleted.
"""
type Database {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Hostname of the database"""
  hostName: String!

  """Port number of the database connection"""
  port: String

  """Database type shortname"""
  connectionType: String!

  """True if this database has been marked as certified"""
  isCertified: Boolean

  """Notes related to the database being marked as certified"""
  certificationNote: String

  """Tables contained in this database"""
  tables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseTableSortOrder!]
  ): [DatabaseTable!]!

  """Tables contained in this database"""
  tablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseTableSortOrder!]
  ): DatabaseTablesConnection

  """The actor who last modified the field 'isCertified'"""
  isCertified_modifyingUser: String
}

"""Filter by GraphQL field and given value"""
input Database_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """Hostname of the database"""
  hostName: String

  """Port number of the database connection"""
  port: String

  """Database type shortname"""
  connectionType: String

  """True if this database has been marked as certified"""
  isCertified: Boolean

  """Notes related to the database being marked as certified"""
  certificationNote: String

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum DatabaseOrderField {
  """Sort by tables count"""
  TABLES_COUNT

  """Sort by connectionType"""
  CONNECTION_TYPE

  """Sort by hostName"""
  HOST_NAME

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for Database"""
type DatabasesConnection {
  """List of nodes"""
  nodes: [Database!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DatabaseSortOrder {
  """GraphQL field to sort on"""
  field: DatabaseOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" table that is contained in a database"""
type DatabaseTable implements Table {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """User modifiable description of this table"""
  description: String

  """Name of table schema"""
  schema: String

  """True if this database table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the database table being marked as certified"""
  certificationNote: String

  """Columns contained in this table"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): [Column!]!

  """Columns contained in this table"""
  columnsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): ColumnsConnection

  """Published datasources connected to the table"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): [PublishedDatasource!]!

  """Published datasources connected to the table"""
  downstreamDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): PublishedDatasourcesConnection

  """Sheets connected to the table"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected to the table"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected to the table"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]!

  """Workbooks connected to the table"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]!

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """The database that this table belongs to"""
  database: Database

  """The custom SQL queries that reference this table"""
  referencedByQueries(
    """Filter by GraphQL field and given value"""
    filter: QueryTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [QueryTableSortOrder!]
  ): [QueryTable]

  """The custom SQL queries that reference this table"""
  referencedByQueriesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: QueryTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [QueryTableSortOrder!]
  ): QueryTablesConnection

  """The actor who last modified the field 'isCertified'"""
  isCertified_modifyingUser: String
}

"""Filter by GraphQL field and given value"""
input DatabaseTable_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """User modifiable description of this table"""
  description: String

  """Name of table schema"""
  schema: String

  """True if this database table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the database table being marked as certified"""
  certificationNote: String

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum DatabaseTableOrderField {
  """Sort by columns count"""
  COLUMNS_COUNT

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by schema"""
  SCHEMA
}

"""Connection Type for DatabaseTable"""
type DatabaseTablesConnection {
  """List of nodes"""
  nodes: [DatabaseTable!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DatabaseTableSortOrder {
  """GraphQL field to sort on"""
  field: DatabaseTableOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
Base GraphQL type for a field containing data. Most types of Fields will
implement this interface with exceptions like HierarchyField.
"""
interface DataField {
  """Data category of the field"""
  dataCategory: FieldRoleCategory!

  """Role of the field: 'dimension', 'measure' or 'unknown'"""
  role: FieldRole!

  """
  Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html
  """
  dataType: FieldDataType!

  """List of aliases, if any, for this field"""
  valueAliases(
    """Filter by GraphQL field and given value"""
    filter: ValueAlias_Filter
  ): [ValueAlias!]!

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection
}

"""Filter by GraphQL field and given value"""
input DataField_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID
}

"""Enum for fields that can be used for sorting"""
enum DataFieldOrderField {
  """Sort by dataCategory"""
  DATA_CATEGORY

  """Sort by dataType"""
  DATA_TYPE

  """Sort by id"""
  ID

  """Sort by role"""
  ROLE
}

"""Connection Type for DataField"""
type DataFieldsConnection {
  """List of nodes"""
  nodes: [DataField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DataFieldSortOrder {
  """GraphQL field to sort on"""
  field: DataFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
Root GraphQL type for embedded and published data sources

Data sources are a way to represent how Tableau Desktop and Tableau Server model
and connect to data. Data sources can be published separately, as a published
data source, or may be contained in a workbook as an embedded data source.

See https://onlinehelp.tableau.com/current/server/en-us/datasource.htm
"""
interface Datasource {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """
  True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)
  """
  hasUserReference: Boolean!

  """True if datasource contains extracted data"""
  hasExtracts: Boolean

  """Fields usable in workbooks connected to this data source"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: BaseField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BaseFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BaseField!]!

  """
  Fields usable in workbooks connected to this data source. Recurse is not
  supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BaseField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BaseFieldSortOrder!]
  ): BaseFieldsConnection

  """Data source filters contained in this data source"""
  datasourceFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter!]!

  """Data source filters contained in this data source"""
  datasourceFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """Sheets downstream from this data source"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets downstream from this data source"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks downstream from this data source"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]!

  """Workbooks downstream from this data source"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners downstream from this data source"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]!

  """Workbook owners downstream from this data source"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables upstream from this data source"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables upstream from this data source"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases upstream from this data source"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases upstream from this data source"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection
}

"""Filter by GraphQL field and given value"""
input Datasource_Filter {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """
  True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)
  """
  hasUserReference: Boolean

  """True if datasource contains extracted data"""
  hasExtracts: Boolean
}

"""
GraphQL type for a data source field. Data source fields can only exist in
embedded data sources which connect to a published data source. A data source
field is an embedded data source's 'layered' representation of a field that
already exists in the published data source and is mostly a copy of the field in
the published data source. Data source fields can get their own descriptions and
renames local to the embedded data source, but cannot otherwise be modified in
the embedded data source.
"""
type DatasourceField implements BaseField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """
  Reference to a field from a published data source. This property only exists
  on Fields that are in an embedded data source with a connection to a published data source.
  """
  remoteField: BaseField

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]

  """Workbooks connected downstream from the field"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables connected upstream from the field"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases connected upstream from the field"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection
}

"""Filter by GraphQL field and given value"""
input DatasourceField_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String
}

"""Enum for fields that can be used for sorting"""
enum DatasourceFieldOrderField {
  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for DatasourceField"""
type DatasourceFieldsConnection {
  """List of nodes"""
  nodes: [DatasourceField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DatasourceFieldSortOrder {
  """GraphQL field to sort on"""
  field: DatasourceFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
Data source filters include/exclude certain values from a single field to filter
out rows of data from this data source. For data security reasons, we don't
track the values used in the filter in this schema, but you can see the field
used in the filter.

See https://onlinehelp.tableau.com/current/pro/desktop/en-us/filtering_datasource.html
"""
type DatasourceFilter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Field used by this filter."""
  field: BaseField!

  """Data source that contains this datasource filter"""
  datasource: Datasource
}

"""Filter by GraphQL field and given value"""
input DatasourceFilter_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID
}

"""Enum for fields that can be used for sorting"""
enum DatasourceFilterOrderField {
  """Sort by id"""
  ID
}

"""Connection Type for DatasourceFilter"""
type DatasourceFiltersConnection {
  """List of nodes"""
  nodes: [DatasourceFilter!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DatasourceFilterSortOrder {
  """GraphQL field to sort on"""
  field: DatasourceFilterOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Enum for fields that can be used for sorting"""
enum DatasourceOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for Datasource"""
type DatasourcesConnection {
  """List of nodes"""
  nodes: [Datasource!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input DatasourceSortOrder {
  """GraphQL field to sort on"""
  field: DatasourceOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""An RFC-3339 compliant DateTime Scalar"""
scalar DateTime

""" data source embedded in a workbook"""
type EmbeddedDatasource implements Datasource {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """
  True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)
  """
  hasUserReference: Boolean!

  """True if datasource contains extracted data"""
  hasExtracts: Boolean

  """Fields, usually measures or dimensions, contained in the data source"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: BaseField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BaseFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BaseField!]!

  """
  Fields, usually measures or dimensions, contained in the data source. Recurse
  is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BaseField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BaseFieldSortOrder!]
  ): BaseFieldsConnection

  """Data source filters contained in this data source"""
  datasourceFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter!]!

  """Data source filters contained in this data source"""
  datasourceFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """Sheets downstream from this data source"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets downstream from this data source"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks downstream from this data source"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]!

  """Workbooks downstream from this data source"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners downstream from this data source"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]!

  """Workbook owners downstream from this data source"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables upstream from this data source"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables upstream from this data source"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases upstream from this data source"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases upstream from this data source"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection

  """Workbook that contains these embedded datasources"""
  workbook: Workbook
}

"""Filter by GraphQL field and given value"""
input EmbeddedDatasource_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """
  True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)
  """
  hasUserReference: Boolean

  """True if datasource contains extracted data"""
  hasExtracts: Boolean
}

"""Enum for fields that can be used for sorting"""
enum EmbeddedDatasourceOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for EmbeddedDatasource"""
type EmbeddedDatasourcesConnection {
  """List of nodes"""
  nodes: [EmbeddedDatasource!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input EmbeddedDatasourceSortOrder {
  """GraphQL field to sort on"""
  field: EmbeddedDatasourceOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Alias union type for all types of field"""
union Field = BinField | CalculatedField | ColumnField | CombinedField | CombinedSetField | DatasourceField | GroupField | SetField | HierarchyField

"""Filter by GraphQL field and given value"""
input Field_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID
}

"""Possible data types for a field."""
enum FieldDataType {
  INTEGER
  REAL
  STRING
  DATETIME
  DATE
  TUPLE
  SPATIAL
  BOOLEAN
  UNKNOWN
}

"""Filter by GraphQL field and given value"""
input FieldDataType_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID
}

"""Enum for fields that can be used for sorting"""
enum FieldOrderField {
  """Sort by id"""
  ID
}

"""
Base GraphQL type for a field that references another field. For example, a
CalculatedField can reference a ColumnField in its formula.
"""
interface FieldReferencingField {
  """Fields referenced by this field"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  Fields referenced by this field. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]
  ): FieldsConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables connected upstream from the field"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases connected upstream from the field"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection
}

"""Filter by GraphQL field and given value"""
input FieldReferencingField_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID
}

"""Enum for fields that can be used for sorting"""
enum FieldReferencingFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by id"""
  ID
}

"""Connection Type for FieldReferencingField"""
type FieldReferencingFieldsConnection {
  """List of nodes"""
  nodes: [FieldReferencingField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FieldReferencingFieldSortOrder {
  """GraphQL field to sort on"""
  field: FieldReferencingFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Possible roles of a field."""
enum FieldRole {
  DIMENSION
  MEASURE
  UNKNOWN
}

"""Filter by GraphQL field and given value"""
input FieldRole_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID
}

"""Possible categories of a field role."""
enum FieldRoleCategory {
  QUANTITATIVE
  NOMINAL
  ORDINAL
  UNKNOWN
}

"""Filter by GraphQL field and given value"""
input FieldRoleCategory_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID
}

"""Connection Type for Field"""
type FieldsConnection {
  """List of nodes"""
  nodes: [Field!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input FieldSortOrder {
  """GraphQL field to sort on"""
  field: FieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
GraphQL type for a group field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_groups_creating.html
"""
type GroupField implements BaseField & DataField & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """Data category of the field"""
  dataCategory: FieldRoleCategory!

  """Role of the field: 'dimension', 'measure' or 'unknown'"""
  role: FieldRole!

  """
  Type of the data in the field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_typesandroles_datatypes.html
  """
  dataType: FieldDataType!

  """List of aliases, if any, for this field"""
  valueAliases(
    """Filter by GraphQL field and given value"""
    filter: ValueAlias_Filter
  ): [ValueAlias!]!

  """
  Field has an 'Other' group. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_groups_creating.html#Include
  """
  hasOther: Boolean!

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]
  ): FieldsConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]

  """Workbooks connected downstream from the field"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables connected upstream from the field"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases connected upstream from the field"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection
}

"""Filter by GraphQL field and given value"""
input GroupField_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """
  Field has an 'Other' group. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_groups_creating.html#Include
  """
  hasOther: Boolean
}

"""Enum for fields that can be used for sorting"""
enum GroupFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by dataCategory"""
  DATA_CATEGORY

  """Sort by dataType"""
  DATA_TYPE

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by role"""
  ROLE
}

"""Connection Type for GroupField"""
type GroupFieldsConnection {
  """List of nodes"""
  nodes: [GroupField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input GroupFieldSortOrder {
  """GraphQL field to sort on"""
  field: GroupFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
GraphQL type for a hierarchy. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/qs_hierarchies.html
"""
type HierarchyField implements BaseField & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]
  ): FieldsConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]

  """Workbooks connected downstream from the field"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables connected upstream from the field"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases connected upstream from the field"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection
}

"""Filter by GraphQL field and given value"""
input HierarchyField_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String
}

"""Enum for fields that can be used for sorting"""
enum HierarchyFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for HierarchyField"""
type HierarchyFieldsConnection {
  """List of nodes"""
  nodes: [HierarchyField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input HierarchyFieldSortOrder {
  """GraphQL field to sort on"""
  field: HierarchyFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Result from query on List Ids"""
type ListIdsResult {
  """List of unique identifiers from the requested type name"""
  ids: [String!]

  """
  Cursor used to make another ListIds query to get the next set of ids. Nothing is returned if there are no more ids
  """
  cursor: String
}

""" table that is contained in a local file data source"""
type LocalFileTable implements Table {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """User modifiable description of this table"""
  description: String

  """Path to file"""
  filePath: String!

  """True if this local file table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the local file table being marked as certified"""
  certificationNote: String

  """Columns contained in this table"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): [Column!]!

  """Columns contained in this table"""
  columnsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): ColumnsConnection

  """Published datasources connected to the table"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): [PublishedDatasource!]!

  """Published datasources connected to the table"""
  downstreamDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): PublishedDatasourcesConnection

  """Sheets connected to the table"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected to the table"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected to the table"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]!

  """Workbooks connected to the table"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]!

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """The actor who last modified the field 'isCertified'"""
  isCertified_modifyingUser: String
}

"""Filter by GraphQL field and given value"""
input LocalFileTable_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """User modifiable description of this table"""
  description: String

  """Path to file"""
  filePath: String

  """True if this local file table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the local file table being marked as certified"""
  certificationNote: String

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum LocalFileTableOrderField {
  """Sort by columns count"""
  COLUMNS_COUNT

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for LocalFileTable"""
type LocalFileTablesConnection {
  """List of nodes"""
  nodes: [LocalFileTable!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input LocalFileTableSortOrder {
  """GraphQL field to sort on"""
  field: LocalFileTableOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Mutation root for Metadata GraphQL interface"""
type Mutation {
  """Mutation method for GraphQL type PublishedDatasource"""
  updatePublishedDatasource(
    """The input for mutating GraphQL type PublishedDatasource"""
    input: UpdatePublishedDatasource_Input
  ): UpdatePublishedDatasource_Output

  """Mutation method for GraphQL type Database"""
  updateDatabase(
    """The input for mutating GraphQL type Database"""
    input: UpdateDatabase_Input
  ): UpdateDatabase_Output

  """Mutation method for GraphQL type RemoteFile"""
  updateRemoteFile(
    """The input for mutating GraphQL type RemoteFile"""
    input: UpdateRemoteFile_Input
  ): UpdateRemoteFile_Output

  """Mutation method for GraphQL type DatabaseTable"""
  updateDatabaseTable(
    """The input for mutating GraphQL type DatabaseTable"""
    input: UpdateDatabaseTable_Input
  ): UpdateDatabaseTable_Output

  """Mutation method for GraphQL type QueryTable"""
  updateQueryTable(
    """The input for mutating GraphQL type QueryTable"""
    input: UpdateQueryTable_Input
  ): UpdateQueryTable_Output

  """Mutation method for GraphQL type LocalFileTable"""
  updateLocalFileTable(
    """The input for mutating GraphQL type LocalFileTable"""
    input: UpdateLocalFileTable_Input
  ): UpdateLocalFileTable_Output

  """Mutation method for GraphQL type RemoteFileTable"""
  updateRemoteFileTable(
    """The input for mutating GraphQL type RemoteFileTable"""
    input: UpdateRemoteFileTable_Input
  ): UpdateRemoteFileTable_Output

  """Mutation method for GraphQL type WebDataConnectorTable"""
  updateWebDataConnectorTable(
    """The input for mutating GraphQL type WebDataConnectorTable"""
    input: UpdateWebDataConnectorTable_Input
  ): UpdateWebDataConnectorTable_Output

  """Mutation method for GraphQL type Column"""
  updateColumn(
    """The input for mutating GraphQL type Column"""
    input: UpdateColumn_Input
  ): UpdateColumn_Output

  """Mutation method for GraphQL type Workbook"""
  updateWorkbook(
    """The input for mutating GraphQL type Workbook"""
    input: UpdateWorkbook_Input
  ): UpdateWorkbook_Output
}

"""General object for sorting"""
enum OrderDirection {
  """Sort in an ascending order."""
  ASC

  """Sort in a descending order."""
  DESC
}

"""Information about pagination in a connection"""
type PageInfo {
  """Indicates if there are more objects to fetch"""
  hasNextPage: Boolean!
}

"""
Tableau Parameter. For more info see https://onlinehelp.tableau.com/current/pro/desktop/en-us/parameters_create.html
"""
type Parameter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name of parameter"""
  name: String!

  """Name of the parameter's parent"""
  parentName: String!

  """Published data source that contains this parameter"""
  datasource: PublishedDatasource

  """The bin field that references this parameter"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this parameter. Recurse is not supported with
  pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The calculated field that references this parameter"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this parameter. Recurse is not supported
  with pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The set field that this parameter references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this parameter references. Recurse is not supported with
  pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """Workbook that contains this parameter"""
  workbook: Workbook
}

"""Filter by GraphQL field and given value"""
input Parameter_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name of parameter"""
  name: String

  """Name of the parameter's parent"""
  parentName: String
}

"""Enum for fields that can be used for sorting"""
enum ParameterOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by parentName"""
  PARENT_NAME
}

"""Connection Type for Parameter"""
type ParametersConnection {
  """List of nodes"""
  nodes: [Parameter!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input ParameterSortOrder {
  """GraphQL field to sort on"""
  field: ParameterOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" Tableau data source that has been published separately to Tableau Server. It can be used by multiple workbooks.
"""
type PublishedDatasource implements Datasource {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """
  True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)
  """
  hasUserReference: Boolean!

  """True if datasource contains extracted data"""
  hasExtracts: Boolean

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String!

  """Fields usable in workbooks connected to this data source"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: BaseField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BaseFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BaseField!]!

  """
  Fields usable in workbooks connected to this data source. Recurse is not
  supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BaseField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BaseFieldSortOrder!]
  ): BaseFieldsConnection

  """Data source filters contained in this data source"""
  datasourceFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter!]!

  """Data source filters contained in this data source"""
  datasourceFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """List of parameters, if any, used in this data source"""
  parameters(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ParameterSortOrder!]
  ): [Parameter!]!

  """List of parameters, if any, used in this data source"""
  parametersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ParameterSortOrder!]
  ): ParametersConnection

  """The site which contains this published data source"""
  site: TableauSite!

  """The project that contains this published data source. """
  project: TableauProject!

  """User who owns this data source"""
  owner: TableauUser!

  """True if this data source has been marked as certified"""
  isCertified: Boolean!

  """User who marked this data source as certified"""
  certifier: TableauUser

  """Notes related to the data source being marked as certified"""
  certificationNote: String

  """Name of the user who marked this data source as certified"""
  certifierDisplayName: String

  """Description of the datasource"""
  description: String

  """Uri of the datasource"""
  uri: String!

  """
  Vizportal ID of this published datasource, for use in client-to-server communications
  """
  vizportalId: String!

  """VizPortal URL ID; used for URL generation"""
  vizportalUrlId: String!

  """Time an extract was last refreshed"""
  extractLastRefreshTime: DateTime

  """Sheets downstream from this data source"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets downstream from this data source"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks downstream from this data source"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]!

  """Workbooks downstream from this data source"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners downstream from this data source"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]!

  """Workbook owners downstream from this data source"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables upstream from this data source"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables upstream from this data source"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases upstream from this data source"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases upstream from this data source"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection
}

"""Filter by GraphQL field and given value"""
input PublishedDatasource_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """
  True if data source contains a formula that involves a user function (for example, USERNAME or ISMEMBEROF)
  """
  hasUserReference: Boolean

  """True if datasource contains extracted data"""
  hasExtracts: Boolean

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String

  """True if this data source has been marked as certified"""
  isCertified: Boolean

  """Notes related to the data source being marked as certified"""
  certificationNote: String

  """Name of the user who marked this data source as certified"""
  certifierDisplayName: String

  """Description of the datasource"""
  description: String

  """Uri of the datasource"""
  uri: String

  """
  Vizportal ID of this published datasource, for use in client-to-server communications
  """
  vizportalId: String

  """VizPortal URL ID; used for URL generation"""
  vizportalUrlId: String

  """Time an extract was last refreshed"""
  extractLastRefreshTime: DateTime
}

"""Enum for fields that can be used for sorting"""
enum PublishedDatasourceOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for PublishedDatasource"""
type PublishedDatasourcesConnection {
  """List of nodes"""
  nodes: [PublishedDatasource!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input PublishedDatasourceSortOrder {
  """GraphQL field to sort on"""
  field: PublishedDatasourceOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Query root for Metadata GraphQL interface"""
type Query {
  """Fetches Tables by filtering on id or name"""
  tables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Fetches BaseFields by filtering on id or name"""
  baseFields(
    """Filter by GraphQL field and given value"""
    filter: BaseField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BaseFieldSortOrder!]
  ): [BaseField!]!

  """Fetches DataFields by filtering on id or name"""
  dataFields(
    """Filter by GraphQL field and given value"""
    filter: DataField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DataFieldSortOrder!]
  ): [DataField!]!

  """Fetches FieldReferencingFields by filtering on id or name"""
  fieldReferencingFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): [FieldReferencingField!]!

  """Fetches AnalyticsFields by filtering on id or name"""
  analyticsFields(
    """Filter by GraphQL field and given value"""
    filter: AnalyticsField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [AnalyticsFieldSortOrder!]
  ): [AnalyticsField!]!

  """Fetches Datasources by filtering on id or name"""
  datasources(
    """Filter by GraphQL field and given value"""
    filter: Datasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceSortOrder!]
  ): [Datasource!]!

  """Fetches Fields by filtering on id or name"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]
  ): [Field!]!

  """Fetches PublishedDatasources by filtering on id or name"""
  publishedDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): [PublishedDatasource!]!

  """Fetches Databases by filtering on id or name"""
  databases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Fetches RemoteFiles by filtering on id or name"""
  remoteFiles(
    """Filter by GraphQL field and given value"""
    filter: RemoteFile_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [RemoteFileSortOrder!]
  ): [RemoteFile!]!

  """Fetches DatabaseTables by filtering on id or name"""
  databaseTables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseTableSortOrder!]
  ): [DatabaseTable!]!

  """Fetches QueryTables by filtering on id or name"""
  queryTables(
    """Filter by GraphQL field and given value"""
    filter: QueryTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [QueryTableSortOrder!]
  ): [QueryTable!]!

  """Fetches LocalFileTables by filtering on id or name"""
  localFileTables(
    """Filter by GraphQL field and given value"""
    filter: LocalFileTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [LocalFileTableSortOrder!]
  ): [LocalFileTable!]!

  """Fetches RemoteFileTables by filtering on id or name"""
  remoteFileTables(
    """Filter by GraphQL field and given value"""
    filter: RemoteFileTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [RemoteFileTableSortOrder!]
  ): [RemoteFileTable!]!

  """Fetches WebDataConnectorTables by filtering on id or name"""
  webDataConnectorTables(
    """Filter by GraphQL field and given value"""
    filter: WebDataConnectorTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WebDataConnectorTableSortOrder!]
  ): [WebDataConnectorTable!]!

  """Fetches Columns by filtering on id or name"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): [Column!]!

  """Fetches DatasourceFilters by filtering on id or name"""
  datasourceFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter!]!

  """Fetches Parameters by filtering on id or name"""
  parameters(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ParameterSortOrder!]
  ): [Parameter!]!

  """Fetches BinFields by filtering on id or name"""
  binFields(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): [BinField!]!

  """Fetches CalculatedFields by filtering on id or name"""
  calculatedFields(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): [CalculatedField!]!

  """Fetches ColumnFields by filtering on id or name"""
  columnFields(
    """Filter by GraphQL field and given value"""
    filter: ColumnField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnFieldSortOrder!]
  ): [ColumnField!]!

  """Fetches CombinedFields by filtering on id or name"""
  combinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): [CombinedField!]!

  """Fetches CombinedSetFields by filtering on id or name"""
  combinedSetFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): [CombinedSetField!]!

  """Fetches DatasourceFields by filtering on id or name"""
  datasourceFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): [DatasourceField!]!

  """Fetches GroupFields by filtering on id or name"""
  groupFields(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): [GroupField!]!

  """Fetches SetFields by filtering on id or name"""
  setFields(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): [SetField!]!

  """Fetches HierarchyFields by filtering on id or name"""
  hierarchyFields(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): [HierarchyField!]!

  """Fetches Workbooks by filtering on id or name"""
  workbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]!

  """Fetches Sheets by filtering on id or name"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Fetches EmbeddedDatasources by filtering on id or name"""
  embeddedDatasources(
    """Filter by GraphQL field and given value"""
    filter: EmbeddedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [EmbeddedDatasourceSortOrder!]
  ): [EmbeddedDatasource!]!

  """Fetches TableauSites by filtering on id or name"""
  tableauSites(
    """Filter by GraphQL field and given value"""
    filter: TableauSite_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauSiteSortOrder!]
  ): [TableauSite!]!

  """Fetches TableauProjects by filtering on id or name"""
  tableauProjects(
    """Filter by GraphQL field and given value"""
    filter: TableauProject_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauProjectSortOrder!]
  ): [TableauProject!]!

  """Fetches TableauUsers by filtering on id or name"""
  tableauUsers(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]!

  """Query to retrieve the list of ids for a specific GraphQL type."""
  listIds(
    """GraphQL Type to get ids for"""
    typeName: TypeName!

    """Maximum number of results to return in one page. The default is 100"""
    pageSize: Int

    """
    Cursor provided from response of a previous request to continue fetching the
    next sequence of ids. If none is provided then it will fetch the ids from
    the beginning of the sequence
    """
    afterCursor: String
  ): ListIdsResult!

  """Fetch Tables with support for pagination"""
  tablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection!

  """Fetch BaseFields with support for pagination"""
  baseFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: BaseField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BaseFieldSortOrder!]
  ): BaseFieldsConnection!

  """Fetch DataFields with support for pagination"""
  dataFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: DataField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DataFieldSortOrder!]
  ): DataFieldsConnection!

  """Fetch FieldReferencingFields with support for pagination"""
  fieldReferencingFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection!

  """Fetch AnalyticsFields with support for pagination"""
  analyticsFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: AnalyticsField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [AnalyticsFieldSortOrder!]
  ): AnalyticsFieldsConnection!

  """Fetch Datasources with support for pagination"""
  datasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: Datasource_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceSortOrder!]
  ): DatasourcesConnection!

  """Fetch Fields with support for pagination"""
  fieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]
  ): FieldsConnection!

  """Fetch PublishedDatasources with support for pagination"""
  publishedDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): PublishedDatasourcesConnection!

  """Fetch Databases with support for pagination"""
  databasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection!

  """Fetch RemoteFiles with support for pagination"""
  remoteFilesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: RemoteFile_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [RemoteFileSortOrder!]
  ): RemoteFilesConnection!

  """Fetch DatabaseTables with support for pagination"""
  databaseTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseTableSortOrder!]
  ): DatabaseTablesConnection!

  """Fetch QueryTables with support for pagination"""
  queryTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: QueryTable_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [QueryTableSortOrder!]
  ): QueryTablesConnection!

  """Fetch LocalFileTables with support for pagination"""
  localFileTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: LocalFileTable_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [LocalFileTableSortOrder!]
  ): LocalFileTablesConnection!

  """Fetch RemoteFileTables with support for pagination"""
  remoteFileTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: RemoteFileTable_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [RemoteFileTableSortOrder!]
  ): RemoteFileTablesConnection!

  """Fetch WebDataConnectorTables with support for pagination"""
  webDataConnectorTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: WebDataConnectorTable_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WebDataConnectorTableSortOrder!]
  ): WebDataConnectorTablesConnection!

  """Fetch Columns with support for pagination"""
  columnsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): ColumnsConnection!

  """Fetch DatasourceFilters with support for pagination"""
  datasourceFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection!

  """Fetch Parameters with support for pagination"""
  parametersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ParameterSortOrder!]
  ): ParametersConnection!

  """Fetch BinFields with support for pagination"""
  binFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection!

  """Fetch CalculatedFields with support for pagination"""
  calculatedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection!

  """Fetch ColumnFields with support for pagination"""
  columnFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: ColumnField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnFieldSortOrder!]
  ): ColumnFieldsConnection!

  """Fetch CombinedFields with support for pagination"""
  combinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection!

  """Fetch CombinedSetFields with support for pagination"""
  combinedSetFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection!

  """Fetch DatasourceFields with support for pagination"""
  datasourceFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection!

  """Fetch GroupFields with support for pagination"""
  groupFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection!

  """Fetch SetFields with support for pagination"""
  setFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection!

  """Fetch HierarchyFields with support for pagination"""
  hierarchyFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection!

  """Fetch Workbooks with support for pagination"""
  workbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection!

  """Fetch Sheets with support for pagination"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection!

  """Fetch EmbeddedDatasources with support for pagination"""
  embeddedDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: EmbeddedDatasource_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [EmbeddedDatasourceSortOrder!]
  ): EmbeddedDatasourcesConnection!

  """Fetch TableauSites with support for pagination"""
  tableauSitesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: TableauSite_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauSiteSortOrder!]
  ): TableauSitesConnection!

  """Fetch TableauProjects with support for pagination"""
  tableauProjectsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: TableauProject_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauProjectSortOrder!]
  ): TableauProjectsConnection!

  """Fetch TableauUsers with support for pagination"""
  tableauUsersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection!
}

"""
 table that represents the result of evaluating a custom SQL query. These
"tables" are owned by the Tableau data dource (embedded or published) which
contains the SQL query, so they only exist within that data source.
"""
type QueryTable implements Table {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """User modifiable description of this table"""
  description: String

  """Text of the query"""
  query: String!

  """True if this query table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the query table being marked as certified"""
  certificationNote: String

  """Columns contained in this table"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): [Column!]!

  """Columns contained in this table"""
  columnsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): ColumnsConnection

  """Actual tables that this query references."""
  tables(
    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseTableSortOrder!]
  ): [DatabaseTable!]!

  """Actual tables that this query references."""
  tablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatabaseTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseTableSortOrder!]
  ): DatabaseTablesConnection

  """Published datasources connected to the table"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): [PublishedDatasource!]!

  """Published datasources connected to the table"""
  downstreamDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): PublishedDatasourcesConnection

  """Sheets connected to the table"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected to the table"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected to the table"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]!

  """Workbooks connected to the table"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]!

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """The actor who last modified the field 'isCertified'"""
  isCertified_modifyingUser: String
}

"""Filter by GraphQL field and given value"""
input QueryTable_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """User modifiable description of this table"""
  description: String

  """Text of the query"""
  query: String

  """True if this query table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the query table being marked as certified"""
  certificationNote: String

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum QueryTableOrderField {
  """Sort by columns count"""
  COLUMNS_COUNT

  """Sort by tables count"""
  TABLES_COUNT

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by query"""
  QUERY
}

"""Connection Type for QueryTable"""
type QueryTablesConnection {
  """List of nodes"""
  nodes: [QueryTable!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input QueryTableSortOrder {
  """GraphQL field to sort on"""
  field: QueryTableOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" remote file connection"""
type RemoteFile {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """
  Name of the provider of the remote file, e.g., onedrive, google-sheets, dropbox, and box
  """
  provider: String!

  """
  The ID used by the provider for the remote file. Each provider uses IDs in a different format.
  """
  fileId: String!

  """URL for requesting the remote file"""
  requestUrl: String

  """True if this remote file has been marked as certified"""
  isCertified: Boolean

  """Notes related to the remote file being marked as certified"""
  certificationNote: String

  """Tables contained in this database"""
  tables(
    """Filter by GraphQL field and given value"""
    filter: RemoteFileTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [RemoteFileTableSortOrder!]
  ): [RemoteFileTable!]!

  """Tables contained in this database"""
  tablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: RemoteFileTable_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [RemoteFileTableSortOrder!]
  ): RemoteFileTablesConnection

  """The actor who last modified the field 'isCertified'"""
  isCertified_modifyingUser: String
}

"""Filter by GraphQL field and given value"""
input RemoteFile_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """
  Name of the provider of the remote file, e.g., onedrive, google-sheets, dropbox, and box
  """
  provider: String

  """
  The ID used by the provider for the remote file. Each provider uses IDs in a different format.
  """
  fileId: String

  """URL for requesting the remote file"""
  requestUrl: String

  """True if this remote file has been marked as certified"""
  isCertified: Boolean

  """Notes related to the remote file being marked as certified"""
  certificationNote: String

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum RemoteFileOrderField {
  """Sort by tables count"""
  TABLES_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by provider"""
  PROVIDER
}

"""Connection Type for RemoteFile"""
type RemoteFilesConnection {
  """List of nodes"""
  nodes: [RemoteFile!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input RemoteFileSortOrder {
  """GraphQL field to sort on"""
  field: RemoteFileOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" table that is contained in a remote file data source"""
type RemoteFileTable implements Table {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """User modifiable description of this table"""
  description: String

  """True if this remote file table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the remote file table being marked as certified"""
  certificationNote: String

  """Columns contained in this table"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): [Column!]!

  """Columns contained in this table"""
  columnsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): ColumnsConnection

  """Published datasources connected to the table"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): [PublishedDatasource!]!

  """Published datasources connected to the table"""
  downstreamDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): PublishedDatasourcesConnection

  """Sheets connected to the table"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected to the table"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected to the table"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]!

  """Workbooks connected to the table"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]!

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """The remote file that this remote file table belongs to"""
  remoteFile: RemoteFile

  """The actor who last modified the field 'isCertified'"""
  isCertified_modifyingUser: String
}

"""Filter by GraphQL field and given value"""
input RemoteFileTable_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """User modifiable description of this table"""
  description: String

  """True if this remote file table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the remote file table being marked as certified"""
  certificationNote: String

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum RemoteFileTableOrderField {
  """Sort by columns count"""
  COLUMNS_COUNT

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for RemoteFileTable"""
type RemoteFileTablesConnection {
  """List of nodes"""
  nodes: [RemoteFileTable!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input RemoteFileTableSortOrder {
  """GraphQL field to sort on"""
  field: RemoteFileTableOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
Possible types of remote types

Types correspond to OLEDB types here: https://referencesource.microsoft.com/#system.data/System/Data/OleDb/OLEDB_Enum.cs,364"
"""
enum RemoteType {
  EMPTY
  NULL
  I2
  I4
  R4
  R8
  CY
  DATE
  BSTR
  IDISPATCH
  ERROR
  BOOL
  VARIANT
  IUNKNOWN
  DECIMAL
  UI1
  ARRAY
  BYREF
  I1
  UI2
  UI4
  I8
  UI8
  GUID
  VECTOR
  FILETIME
  RESERVED
  BYTES
  STR
  WSTR
  NUMERIC
  UDT
  DBDATE
  DBTIME
  DBTIMESTAMP
  HCHAPTER
  PROPVARIANT
  VARNUMERIC
}

"""Filter by GraphQL field and given value"""
input RemoteType_Filter {
  """Unique Identifier of object to retrieve"""
  id: ID
}

"""
GraphQL type for a set field. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/sortgroup_sets_create.html
"""
type SetField implements BaseField & FieldReferencingField {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean!

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String

  """List of fields, if any, that this field references"""
  fields(
    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [Field!]!

  """
  List of fields, if any, that this field references. Recurse is not supported with pagination. Please use fields instead.
  """
  fieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Field_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldSortOrder!]
  ): FieldsConnection

  """List of parameters, if any, used in this field"""
  parameters(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ParameterSortOrder!]
  ): [Parameter!]!

  """List of parameters, if any, used in this field"""
  parametersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ParameterSortOrder!]
  ): ParametersConnection

  """Sheets connected downstream from the field"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected downstream from the field"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected downstream from the field"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]

  """Workbooks connected downstream from the field"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]

  """Workbook owners (authors) connected downstream from the field"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """Tables connected upstream from the field"""
  upstreamTables(
    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): [Table!]!

  """Tables connected upstream from the field"""
  upstreamTablesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Table_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableSortOrder!]
  ): TablesConnection

  """Databases connected upstream from the field"""
  upstreamDatabases(
    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): [Database!]!

  """Databases connected upstream from the field"""
  upstreamDatabasesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Database_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatabaseSortOrder!]
  ): DatabasesConnection

  """The field that references this field"""
  referencedByFields(
    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [FieldReferencingField]

  """
  The field that references this field. Recurse is not supported with pagination. Please use referencedByFields instead.
  """
  referencedByFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: FieldReferencingField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [FieldReferencingFieldSortOrder!]
  ): FieldReferencingFieldsConnection

  """Data source that contains this field"""
  datasource: Datasource

  """The data source filters that include this field"""
  referencedByFilters(
    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): [DatasourceFilter]

  """The data source filters that include this field"""
  referencedByFiltersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceFilter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFilterSortOrder!]
  ): DatasourceFiltersConnection

  """The bin field that references this field"""
  referencedByBins(
    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BinField]

  """
  The bin field that references this field. Recurse is not supported with pagination. Please use referencedByBins instead.
  """
  referencedByBinsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BinField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BinFieldSortOrder!]
  ): BinFieldsConnection

  """The calculated field that references this field"""
  referencedByCalculations(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  The calculated field that references this field. Recurse is not supported with
  pagination. Please use referencedByCalculations instead.
  """
  referencedByCalculationsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """The combined field that references this field"""
  referencedByCombinedFields(
    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedField]

  """
  The combined field that references this field. Recurse is not supported with
  pagination. Please use referencedByCombinedFields instead.
  """
  referencedByCombinedFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedFieldSortOrder!]
  ): CombinedFieldsConnection

  """Thie combined set field that references this field"""
  referencedByCombinedSets(
    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CombinedSetField]

  """
  Thie combined set field that references this field. Recurse is not supported
  with pagination. Please use referencedByCombinedSets instead.
  """
  referencedByCombinedSetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CombinedSetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CombinedSetFieldSortOrder!]
  ): CombinedSetFieldsConnection

  """The field that references this remote field"""
  referencedByRemoteFields(
    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [DatasourceField]

  """
  The field that references this remote field. Recurse is not supported with
  pagination. Please use referencedByRemoteFields instead.
  """
  referencedByRemoteFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: DatasourceField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [DatasourceFieldSortOrder!]
  ): DatasourceFieldsConnection

  """The group field that references this field"""
  referencedByGroups(
    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [GroupField]

  """
  The group field that references this field. Recurse is not supported with
  pagination. Please use referencedByGroups instead.
  """
  referencedByGroupsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: GroupField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [GroupFieldSortOrder!]
  ): GroupFieldsConnection

  """The set field that this field references"""
  referencedBySets(
    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [SetField]

  """
  The set field that this field references. Recurse is not supported with pagination. Please use referencedBySets instead.
  """
  referencedBySetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: SetField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SetFieldSortOrder!]
  ): SetFieldsConnection

  """The hierarchy field that references this field"""
  referencedByHierarchies(
    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [HierarchyField]

  """
  The hierarchy field that references this field. Recurse is not supported with
  pagination. Please use referencedByHierarchies instead.
  """
  referencedByHierarchiesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: HierarchyField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [HierarchyFieldSortOrder!]
  ): HierarchyFieldsConnection

  """Sheets that reference this data source field"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet]

  """Sheets that reference this data source field"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection
}

"""Filter by GraphQL field and given value"""
input SetField_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """Description of field shown in server and desktop clients"""
  description: String

  """True if the field is hidden"""
  isHidden: Boolean

  """
  Name of folder if the field is in a folder. See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_dwfeatures.html#Organize
  """
  folderName: String
}

"""Enum for fields that can be used for sorting"""
enum SetFieldOrderField {
  """Sort by fields count"""
  FIELDS_COUNT

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for SetField"""
type SetFieldsConnection {
  """List of nodes"""
  nodes: [SetField!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input SetFieldSortOrder {
  """GraphQL field to sort on"""
  field: SetFieldOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
 sheet contained in a published workbook. Sheets represent Tableau
visualizations. Dashboards and story points are special types of sheets.
"""
type Sheet {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """
  Locally unique identifier used for the REST API on the Tableau Server (Null if worksheet is hidden in Workbook)
  """
  luid: String

  """
  Calculated fields which were created on this sheet, e.g. in the rows or
  columns shelves and which may not be used on other sheets that use this
  embedded data source
  """
  worksheetFields(
    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [CalculatedField]

  """
  Calculated fields which were created on this sheet, e.g. in the rows or
  columns shelves and which may not be used on other sheets that use this
  embedded data source. Recurse is not supported with pagination. Please use
  worksheetFields instead.
  """
  worksheetFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: CalculatedField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [CalculatedFieldSortOrder!]
  ): CalculatedFieldsConnection

  """
  Fields that are contained in an embedded data source and are also referenced
  by the worksheet. If a worksheet uses calculated fields (or any other
  FieldReferencingField), this list will also include all of the referenced fields.
  """
  datasourceFields(
    """Filter by GraphQL field and given value"""
    filter: BaseField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BaseFieldSortOrder!]

    """
    This option enables recursively retrieving GraphQL fields of its own type.
    The output will be flattened. Defaults to false
    """
    recurse: Boolean = false
  ): [BaseField]

  """
  Fields that are contained in an embedded data source and are also referenced
  by the worksheet. If a worksheet uses calculated fields (or any other
  FieldReferencingField), this list will also include all of the referenced
  fields.. Recurse is not supported with pagination. Please use datasourceFields instead.
  """
  datasourceFieldsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: BaseField_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [BaseFieldSortOrder!]
  ): BaseFieldsConnection

  """Server path to sheet"""
  path: String!

  """The workbook that contains this sheet"""
  workbook: Workbook
}

"""Filter by GraphQL field and given value"""
input Sheet_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """
  Locally unique identifier used for the REST API on the Tableau Server (Null if worksheet is hidden in Workbook)
  """
  luid: String

  """Server path to sheet"""
  path: String
}

"""Enum for fields that can be used for sorting"""
enum SheetOrderField {
  """Sort by datasourceFields count"""
  DATASOURCE_FIELDS_COUNT

  """Sort by worksheetFields count"""
  WORKSHEET_FIELDS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for Sheet"""
type SheetsConnection {
  """List of nodes"""
  nodes: [Sheet!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input SheetSortOrder {
  """GraphQL field to sort on"""
  field: SheetOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

""" table contained in a database"""
interface Table {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """User modifiable description of this table"""
  description: String

  """True if this table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the table being marked as certified"""
  certificationNote: String

  """Columns contained in this table"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): [Column!]!

  """Columns contained in this table"""
  columnsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): ColumnsConnection

  """Published datasources connected to the table"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): [PublishedDatasource!]!

  """Published datasources connected to the table"""
  downstreamDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): PublishedDatasourcesConnection

  """Sheets connected to the table"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected to the table"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected to the table"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]!

  """Workbooks connected to the table"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]!

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection
}

"""Filter by GraphQL field and given value"""
input Table_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """User modifiable description of this table"""
  description: String

  """True if this table has been marked as certified"""
  isCertified: Boolean

  """Notes related to the table being marked as certified"""
  certificationNote: String

  """Filter the output based on text query."""
  text: String
}

"""Project on a site on Tableau server"""
type TableauProject {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID!

  """URI of this project, e.g., 'sites/2/projects/4'"""
  uri: String!

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String!

  """Name shown in server"""
  name: String!

  """The published data sources that are part of this project"""
  publishedDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): [PublishedDatasource]

  """The published data sources that are part of this project"""
  publishedDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): PublishedDatasourcesConnection

  """The workbooks that are part of this project"""
  workbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook]

  """The workbooks that are part of this project"""
  workbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection
}

"""Filter by GraphQL field and given value"""
input TableauProject_Filter {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID

  """URI of this project, e.g., 'sites/2/projects/4'"""
  uri: String

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String

  """Name shown in server"""
  name: String
}

"""Enum for fields that can be used for sorting"""
enum TableauProjectOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for TableauProject"""
type TableauProjectsConnection {
  """List of nodes"""
  nodes: [TableauProject!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input TableauProjectSortOrder {
  """GraphQL field to sort on"""
  field: TableauProjectOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Site on Tableau server"""
type TableauSite {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID!

  """URI of this site, e.g., 'sites/4'"""
  uri: String!

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String!

  """Name shown in server"""
  name: String!

  """The published data sources that are part of this site"""
  publishedDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): [PublishedDatasource]

  """The published data sources that are part of this site"""
  publishedDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): PublishedDatasourcesConnection

  """The workbooks that are part of this site"""
  workbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook]

  """The workbooks that are part of this site"""
  workbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection
}

"""Filter by GraphQL field and given value"""
input TableauSite_Filter {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID

  """URI of this site, e.g., 'sites/4'"""
  uri: String

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String

  """Name shown in server"""
  name: String
}

"""Enum for fields that can be used for sorting"""
enum TableauSiteOrderField {
  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for TableauSite"""
type TableauSitesConnection {
  """List of nodes"""
  nodes: [TableauSite!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input TableauSiteSortOrder {
  """GraphQL field to sort on"""
  field: TableauSiteOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""User on a site on Tableau server"""
type TableauUser {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID!

  """URI of this user, e.g., 'sites/1/users/1396'"""
  uri: String!

  """Vizportal ID of this user, for use in client-to-server communications"""
  vizportalId: String!

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String!

  """Username of this user"""
  username: String!

  """Display name of this user"""
  name: String

  """Domain this user belongs to"""
  domain: String!

  """Email address of this user"""
  email: String

  """The published data sources that belong to this user"""
  ownerDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): [PublishedDatasource]

  """The published data sources that belong to this user"""
  ownerDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): PublishedDatasourcesConnection

  """The published data sources that this user has certified"""
  certifierDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): [PublishedDatasource]

  """The published data sources that this user has certified"""
  certifierDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): PublishedDatasourcesConnection

  """The workbooks that belong to this user"""
  ownerWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook]

  """The workbooks that belong to this user"""
  ownerWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection
}

"""Filter by GraphQL field and given value"""
input TableauUser_Filter {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID

  """URI of this user, e.g., 'sites/1/users/1396'"""
  uri: String

  """Vizportal ID of this user, for use in client-to-server communications"""
  vizportalId: String

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String

  """Username of this user"""
  username: String

  """Display name of this user"""
  name: String

  """Domain this user belongs to"""
  domain: String

  """Email address of this user"""
  email: String
}

"""Enum for fields that can be used for sorting"""
enum TableauUserOrderField {
  """Sort by domain"""
  DOMAIN

  """Sort by email"""
  EMAIL

  """Sort by id"""
  ID

  """Sort by name"""
  NAME

  """Sort by username"""
  USERNAME
}

"""Connection Type for TableauUser"""
type TableauUsersConnection {
  """List of nodes"""
  nodes: [TableauUser!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input TableauUserSortOrder {
  """GraphQL field to sort on"""
  field: TableauUserOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Enum for fields that can be used for sorting"""
enum TableOrderField {
  """Sort by columns count"""
  COLUMNS_COUNT

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for Table"""
type TablesConnection {
  """List of nodes"""
  nodes: [Table!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input TableSortOrder {
  """GraphQL field to sort on"""
  field: TableOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""Enum of GraphQL types"""
enum TypeName {
  Table
  BaseField
  DataField
  FieldReferencingField
  AnalyticsField
  Datasource
  Field
  PublishedDatasource
  Database
  RemoteFile
  DatabaseTable
  QueryTable
  LocalFileTable
  RemoteFileTable
  WebDataConnectorTable
  Column
  DatasourceFilter
  Parameter
  BinField
  CalculatedField
  ColumnField
  CombinedField
  CombinedSetField
  DatasourceField
  GroupField
  SetField
  HierarchyField
  Workbook
  Sheet
  EmbeddedDatasource
  TableauSite
  TableauProject
  TableauUser
}

"""Input object for mutating GraphQL type Column"""
input UpdateColumn_Input {
  """Unique Identifier of object to update"""
  id: ID!

  """Notes related to the column being marked as certified"""
  certificationNote: String

  """True if this column has been marked as certified"""
  isCertified: Boolean

  """User modifiable description of this column"""
  description: String
}

"""The output object of the mutation method for GraphQL type Column"""
type UpdateColumn_Output {
  """Unique Identifier of object that was updated"""
  id: ID

  """Notes related to the column being marked as certified"""
  certificationNote: String

  """True if this column has been marked as certified"""
  isCertified: Boolean

  """User modifiable description of this column"""
  description: String
}

"""Input object for mutating GraphQL type Database"""
input UpdateDatabase_Input {
  """Unique Identifier of object to update"""
  id: ID!

  """Notes related to the database being marked as certified"""
  certificationNote: String

  """True if this database has been marked as certified"""
  isCertified: Boolean
}

"""The output object of the mutation method for GraphQL type Database"""
type UpdateDatabase_Output {
  """Unique Identifier of object that was updated"""
  id: ID

  """Notes related to the database being marked as certified"""
  certificationNote: String

  """True if this database has been marked as certified"""
  isCertified: Boolean
}

"""Input object for mutating GraphQL type DatabaseTable"""
input UpdateDatabaseTable_Input {
  """Unique Identifier of object to update"""
  id: ID!

  """Notes related to the database table being marked as certified"""
  certificationNote: String

  """True if this database table has been marked as certified"""
  isCertified: Boolean

  """User modifiable description of this table"""
  description: String
}

"""
The output object of the mutation method for GraphQL type DatabaseTable
"""
type UpdateDatabaseTable_Output {
  """Unique Identifier of object that was updated"""
  id: ID

  """Notes related to the database table being marked as certified"""
  certificationNote: String

  """True if this database table has been marked as certified"""
  isCertified: Boolean

  """User modifiable description of this table"""
  description: String
}

"""Input object for mutating GraphQL type LocalFileTable"""
input UpdateLocalFileTable_Input {
  """Unique Identifier of object to update"""
  id: ID!

  """Notes related to the local file table being marked as certified"""
  certificationNote: String

  """True if this local file table has been marked as certified"""
  isCertified: Boolean

  """User modifiable description of this table"""
  description: String
}

"""
The output object of the mutation method for GraphQL type LocalFileTable
"""
type UpdateLocalFileTable_Output {
  """Unique Identifier of object that was updated"""
  id: ID

  """Notes related to the local file table being marked as certified"""
  certificationNote: String

  """True if this local file table has been marked as certified"""
  isCertified: Boolean

  """User modifiable description of this table"""
  description: String
}

"""Input object for mutating GraphQL type PublishedDatasource"""
input UpdatePublishedDatasource_Input {
  """Unique Identifier of object to update"""
  id: ID!

  """Notes related to the data source being marked as certified"""
  certificationNote: String

  """True if this data source has been marked as certified"""
  isCertified: Boolean

  """Description of the datasource"""
  description: String
}

"""
The output object of the mutation method for GraphQL type PublishedDatasource
"""
type UpdatePublishedDatasource_Output {
  """Unique Identifier of object that was updated"""
  id: ID

  """Notes related to the data source being marked as certified"""
  certificationNote: String

  """True if this data source has been marked as certified"""
  isCertified: Boolean!

  """Description of the datasource"""
  description: String
}

"""Input object for mutating GraphQL type QueryTable"""
input UpdateQueryTable_Input {
  """Unique Identifier of object to update"""
  id: ID!

  """Notes related to the query table being marked as certified"""
  certificationNote: String

  """True if this query table has been marked as certified"""
  isCertified: Boolean

  """User modifiable description of this table"""
  description: String
}

"""The output object of the mutation method for GraphQL type QueryTable"""
type UpdateQueryTable_Output {
  """Unique Identifier of object that was updated"""
  id: ID

  """Notes related to the query table being marked as certified"""
  certificationNote: String

  """True if this query table has been marked as certified"""
  isCertified: Boolean

  """User modifiable description of this table"""
  description: String
}

"""Input object for mutating GraphQL type RemoteFile"""
input UpdateRemoteFile_Input {
  """Unique Identifier of object to update"""
  id: ID!

  """Notes related to the remote file being marked as certified"""
  certificationNote: String

  """True if this remote file has been marked as certified"""
  isCertified: Boolean
}

"""The output object of the mutation method for GraphQL type RemoteFile"""
type UpdateRemoteFile_Output {
  """Unique Identifier of object that was updated"""
  id: ID

  """Notes related to the remote file being marked as certified"""
  certificationNote: String

  """True if this remote file has been marked as certified"""
  isCertified: Boolean
}

"""Input object for mutating GraphQL type RemoteFileTable"""
input UpdateRemoteFileTable_Input {
  """Unique Identifier of object to update"""
  id: ID!

  """Notes related to the remote file table being marked as certified"""
  certificationNote: String

  """True if this remote file table has been marked as certified"""
  isCertified: Boolean

  """User modifiable description of this table"""
  description: String
}

"""
The output object of the mutation method for GraphQL type RemoteFileTable
"""
type UpdateRemoteFileTable_Output {
  """Unique Identifier of object that was updated"""
  id: ID

  """Notes related to the remote file table being marked as certified"""
  certificationNote: String

  """True if this remote file table has been marked as certified"""
  isCertified: Boolean

  """User modifiable description of this table"""
  description: String
}

"""Input object for mutating GraphQL type WebDataConnectorTable"""
input UpdateWebDataConnectorTable_Input {
  """Unique Identifier of object to update"""
  id: ID!

  """
  Notes related to the web data connector table being marked as certified
  """
  certificationNote: String

  """True if this web data connector table has been marked as certified"""
  isCertified: Boolean

  """User modifiable description of this table"""
  description: String
}

"""
The output object of the mutation method for GraphQL type WebDataConnectorTable
"""
type UpdateWebDataConnectorTable_Output {
  """Unique Identifier of object that was updated"""
  id: ID

  """
  Notes related to the web data connector table being marked as certified
  """
  certificationNote: String

  """True if this web data connector table has been marked as certified"""
  isCertified: Boolean

  """User modifiable description of this table"""
  description: String
}

"""Input object for mutating GraphQL type Workbook"""
input UpdateWorkbook_Input {
  """Unique Identifier of object to update"""
  id: ID!

  """Description of the workbook"""
  description: String
}

"""The output object of the mutation method for GraphQL type Workbook"""
type UpdateWorkbook_Output {
  """Unique Identifier of object that was updated"""
  id: ID

  """Description of the workbook"""
  description: String
}

"""
Value aliases are alternate names for members of a dimension that will be used
when displaying this dimension in a Tableau visualization. 
See https://onlinehelp.tableau.com/current/pro/desktop/en-us/datafields_fieldproperties_aliases_ex1editing.html
"""
type ValueAlias {
  """Original name of the member in dimension"""
  originalName: String!

  """New name of the member in dimension"""
  newName: String!
}

"""Filter by GraphQL field and given value"""
input ValueAlias_Filter {
  """Original name of the member in dimension"""
  originalName: String

  """New name of the member in dimension"""
  newName: String

  """Unique Identifier of object to retrieve"""
  id: ID
}

""" table that is derived from a web data connector"""
type WebDataConnectorTable implements Table {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """User modifiable description of this table"""
  description: String

  """The type of web data connector"""
  connectorType: String!

  """The url for the sign-in page of the web data connector"""
  connectorUrl: String!

  """True if this web data connector table has been marked as certified"""
  isCertified: Boolean

  """
  Notes related to the web data connector table being marked as certified
  """
  certificationNote: String

  """Columns contained in this table"""
  columns(
    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): [Column!]!

  """Columns contained in this table"""
  columnsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Column_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ColumnSortOrder!]
  ): ColumnsConnection

  """Published datasources connected to the table"""
  downstreamDatasources(
    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): [PublishedDatasource!]!

  """Published datasources connected to the table"""
  downstreamDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: PublishedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [PublishedDatasourceSortOrder!]
  ): PublishedDatasourcesConnection

  """Sheets connected to the table"""
  downstreamSheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets connected to the table"""
  downstreamSheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Workbooks connected to the table"""
  downstreamWorkbooks(
    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): [Workbook!]!

  """Workbooks connected to the table"""
  downstreamWorkbooksConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Workbook_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [WorkbookSortOrder!]
  ): WorkbooksConnection

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwners(
    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): [TableauUser!]!

  """Owners of workbooks and published datasources connected to the table"""
  downstreamOwnersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: TableauUser_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [TableauUserSortOrder!]
  ): TableauUsersConnection

  """The actor who last modified the field 'isCertified'"""
  isCertified_modifyingUser: String
}

"""Filter by GraphQL field and given value"""
input WebDataConnectorTable_Filter {
  """
  Unique identifier used by the metadata API. Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """User modifiable description of this table"""
  description: String

  """The type of web data connector"""
  connectorType: String

  """The url for the sign-in page of the web data connector"""
  connectorUrl: String

  """True if this web data connector table has been marked as certified"""
  isCertified: Boolean

  """
  Notes related to the web data connector table being marked as certified
  """
  certificationNote: String

  """Filter the output based on text query."""
  text: String
}

"""Enum for fields that can be used for sorting"""
enum WebDataConnectorTableOrderField {
  """Sort by columns count"""
  COLUMNS_COUNT

  """Sort by description"""
  DESCRIPTION

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for WebDataConnectorTable"""
type WebDataConnectorTablesConnection {
  """List of nodes"""
  nodes: [WebDataConnectorTable!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input WebDataConnectorTableSortOrder {
  """GraphQL field to sort on"""
  field: WebDataConnectorTableOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

"""
Workbooks are used to package up Tableau visualizations (which are called
"sheets" in the Metadata API) and data models (which are called "embedded data
sources" when they are owned by a workbook). 
"""
type Workbook {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID!

  """Name shown in server and desktop clients"""
  name: String!

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String!

  """The site in which the workbook is visible and usable"""
  site: TableauSite!

  """The project in which the workbook is visible and usable"""
  project: TableauProject!

  """User who owns this workbook"""
  owner: TableauUser!

  """Sheets that are contained in this workbook"""
  sheets(
    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): [Sheet!]!

  """Sheets that are contained in this workbook"""
  sheetsConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Sheet_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [SheetSortOrder!]
  ): SheetsConnection

  """Data sources that are embedded in this workbook"""
  embeddedDatasources(
    """Filter by GraphQL field and given value"""
    filter: EmbeddedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [EmbeddedDatasourceSortOrder!]
  ): [EmbeddedDatasource!]!

  """Data sources that are embedded in this workbook"""
  embeddedDatasourcesConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: EmbeddedDatasource_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [EmbeddedDatasourceSortOrder!]
  ): EmbeddedDatasourcesConnection

  """Parameters that are contained in this workbook"""
  parameters(
    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ParameterSortOrder!]
  ): [Parameter!]!

  """Parameters that are contained in this workbook"""
  parametersConnection(
    """Maximum number of objects to be returned in a page. The default is 100"""
    first: Int

    """
    The number of entries to offset the start of the page by. If no offset is
    supplied it will start at the beginning of the list. After can not be set at the same time.
    """
    offset: Int

    """Filter by GraphQL field and given value"""
    filter: Parameter_Filter

    """
    Sort by given fields. The sort orders defined first in the list will take
    priority. If there are no given sort orders or a tie on the final sorted
    field then the resulting set will be sorted by ID in ascending order.
    """
    orderBy: [ParameterSortOrder!]
  ): ParametersConnection

  """Description of the workbook"""
  description: String

  """Uri of the workbook"""
  uri: String!

  """VizPortal URL ID; used for URL generation"""
  vizportalUrlId: String!
}

"""Filter by GraphQL field and given value"""
input Workbook_Filter {
  """
  Unique identifier used by the metadata API.  Not the same as the numeric ID used on server
  """
  id: ID

  """Name shown in server and desktop clients"""
  name: String

  """Locally unique identifier used for the REST API on the Tableau Server"""
  luid: String

  """Description of the workbook"""
  description: String

  """Uri of the workbook"""
  uri: String

  """VizPortal URL ID; used for URL generation"""
  vizportalUrlId: String
}

"""Enum for fields that can be used for sorting"""
enum WorkbookOrderField {
  """Sort by embeddedDatasources count"""
  EMBEDDED_DATASOURCES_COUNT

  """Sort by sheets count"""
  SHEETS_COUNT

  """Sort by id"""
  ID

  """Sort by name"""
  NAME
}

"""Connection Type for Workbook"""
type WorkbooksConnection {
  """List of nodes"""
  nodes: [Workbook!]!

  """Information for pagination"""
  pageInfo: PageInfo!

  """Total number of objects in connection"""
  totalCount: Int!
}

"""
Sort by given fields. The sort orders defined first in the list will take
priority. If there are no given sort orders or a tie on the final sorted field
then the resulting set will be sorted by ID in ascending order.
"""
input WorkbookSortOrder {
  """GraphQL field to sort on"""
  field: WorkbookOrderField!

  """Order direction to sort output"""
  direction: OrderDirection!
}

